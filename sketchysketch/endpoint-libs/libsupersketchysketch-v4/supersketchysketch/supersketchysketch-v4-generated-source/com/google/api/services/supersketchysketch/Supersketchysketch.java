/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://code.google.com/p/google-apis-client-generator/
 * (build: 2013-03-20 15:12:36 UTC)
 * on 2013-03-25 at 22:04:24 UTC 
 * Modify at your own risk.
 */

package com.google.api.services.supersketchysketch;

/**
 * Service definition for Supersketchysketch (v4).
 *
 * <p>
 * This is an API
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link SupersketchysketchRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class Supersketchysketch extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(com.google.api.client.googleapis.GoogleUtils.VERSION.equals("1.14.1-beta"),
        "You are currently running with version %s of google-api-client. " +
        "You need version 1.14.1-beta of google-api-client to run version " +
        "1.14.1-beta of the  library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://sketchycoursesketch.appspot.com/_ah/api/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "supersketchysketch/v4/";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public Supersketchysketch(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  Supersketchysketch(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the Courses collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Supersketchysketch supersketchysketch = new Supersketchysketch(...);}
   *   {@code Supersketchysketch.Courses.List request = supersketchysketch.courses().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Courses courses() {
    return new Courses();
  }

  /**
   * The "courses" collection of methods.
   */
  public class Courses {

    /**
     * Create a request for the method "courses.delete".
     *
     * This request holds the parameters needed by the the supersketchysketch server.  After setting any
     * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
     *
     * @param id
     * @return the request
     */
    public Delete delete(java.lang.Long id) throws java.io.IOException {
      Delete result = new Delete(id);
      initialize(result);
      return result;
    }

    public class Delete extends SupersketchysketchRequest<com.google.api.services.supersketchysketch.model.SRLCourse> {

      private static final String REST_PATH = "srl_course/{id}";

      /**
       * Create a request for the method "courses.delete".
       *
       * This request holds the parameters needed by the the supersketchysketch server.  After setting
       * any optional parameters, call the {@link Delete#execute()} method to invoke the remote
       * operation. <p> {@link
       * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param id
       * @since 1.13
       */
      protected Delete(java.lang.Long id) {
        super(Supersketchysketch.this, "DELETE", REST_PATH, null, com.google.api.services.supersketchysketch.model.SRLCourse.class);
        this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      }

      @Override
      public Delete setAlt(java.lang.String alt) {
        return (Delete) super.setAlt(alt);
      }

      @Override
      public Delete setFields(java.lang.String fields) {
        return (Delete) super.setFields(fields);
      }

      @Override
      public Delete setKey(java.lang.String key) {
        return (Delete) super.setKey(key);
      }

      @Override
      public Delete setOauthToken(java.lang.String oauthToken) {
        return (Delete) super.setOauthToken(oauthToken);
      }

      @Override
      public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Delete) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Delete setQuotaUser(java.lang.String quotaUser) {
        return (Delete) super.setQuotaUser(quotaUser);
      }

      @Override
      public Delete setUserIp(java.lang.String userIp) {
        return (Delete) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long id;

      /**

       */
      public java.lang.Long getId() {
        return id;
      }

      public Delete setId(java.lang.Long id) {
        this.id = id;
        return this;
      }

      @Override
      public Delete set(String parameterName, Object value) {
        return (Delete) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "courses.get".
     *
     * This request holds the parameters needed by the the supersketchysketch server.  After setting any
     * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param id
     * @return the request
     */
    public Get get(java.lang.Long id) throws java.io.IOException {
      Get result = new Get(id);
      initialize(result);
      return result;
    }

    public class Get extends SupersketchysketchRequest<com.google.api.services.supersketchysketch.model.SRLCourse> {

      private static final String REST_PATH = "srl_course/{id}";

      /**
       * Create a request for the method "courses.get".
       *
       * This request holds the parameters needed by the the supersketchysketch server.  After setting
       * any optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
       * <p> {@link
       * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param id
       * @since 1.13
       */
      protected Get(java.lang.Long id) {
        super(Supersketchysketch.this, "GET", REST_PATH, null, com.google.api.services.supersketchysketch.model.SRLCourse.class);
        this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUserIp(java.lang.String userIp) {
        return (Get) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long id;

      /**

       */
      public java.lang.Long getId() {
        return id;
      }

      public Get setId(java.lang.Long id) {
        this.id = id;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "courses.insert".
     *
     * This request holds the parameters needed by the the supersketchysketch server.  After setting any
     * optional parameters, call the {@link Insert#execute()} method to invoke the remote operation.
     *
     * @param content the {@link com.google.api.services.supersketchysketch.model.SRLCourse}
     * @return the request
     */
    public Insert insert(com.google.api.services.supersketchysketch.model.SRLCourse content) throws java.io.IOException {
      Insert result = new Insert(content);
      initialize(result);
      return result;
    }

    public class Insert extends SupersketchysketchRequest<com.google.api.services.supersketchysketch.model.SRLCourse> {

      private static final String REST_PATH = "srl_course";

      /**
       * Create a request for the method "courses.insert".
       *
       * This request holds the parameters needed by the the supersketchysketch server.  After setting
       * any optional parameters, call the {@link Insert#execute()} method to invoke the remote
       * operation. <p> {@link
       * Insert#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.google.api.services.supersketchysketch.model.SRLCourse}
       * @since 1.13
       */
      protected Insert(com.google.api.services.supersketchysketch.model.SRLCourse content) {
        super(Supersketchysketch.this, "POST", REST_PATH, content, com.google.api.services.supersketchysketch.model.SRLCourse.class);
      }

      @Override
      public Insert setAlt(java.lang.String alt) {
        return (Insert) super.setAlt(alt);
      }

      @Override
      public Insert setFields(java.lang.String fields) {
        return (Insert) super.setFields(fields);
      }

      @Override
      public Insert setKey(java.lang.String key) {
        return (Insert) super.setKey(key);
      }

      @Override
      public Insert setOauthToken(java.lang.String oauthToken) {
        return (Insert) super.setOauthToken(oauthToken);
      }

      @Override
      public Insert setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Insert) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Insert setQuotaUser(java.lang.String quotaUser) {
        return (Insert) super.setQuotaUser(quotaUser);
      }

      @Override
      public Insert setUserIp(java.lang.String userIp) {
        return (Insert) super.setUserIp(userIp);
      }

      @Override
      public Insert set(String parameterName, Object value) {
        return (Insert) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "courses.list".
     *
     * This request holds the parameters needed by the the supersketchysketch server.  After setting any
     * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public List list() throws java.io.IOException {
      List result = new List();
      initialize(result);
      return result;
    }

    public class List extends SupersketchysketchRequest<com.google.api.services.supersketchysketch.model.CollectionResponseSRLCourse> {

      private static final String REST_PATH = "srl_course";

      /**
       * Create a request for the method "courses.list".
       *
       * This request holds the parameters needed by the the supersketchysketch server.  After setting
       * any optional parameters, call the {@link List#execute()} method to invoke the remote operation.
       * <p> {@link
       * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected List() {
        super(Supersketchysketch.this, "GET", REST_PATH, null, com.google.api.services.supersketchysketch.model.CollectionResponseSRLCourse.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String cursor;

      /**

       */
      public java.lang.String getCursor() {
        return cursor;
      }

      public List setCursor(java.lang.String cursor) {
        this.cursor = cursor;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.Integer limit;

      /**

       */
      public java.lang.Integer getLimit() {
        return limit;
      }

      public List setLimit(java.lang.Integer limit) {
        this.limit = limit;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "courses.patch".
     *
     * This request holds the parameters needed by the the supersketchysketch server.  After setting any
     * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
     *
     * @param id
     * @param content the {@link com.google.api.services.supersketchysketch.model.SRLCourse}
     * @return the request
     */
    public Patch patch(java.lang.Long id, com.google.api.services.supersketchysketch.model.SRLCourse content) throws java.io.IOException {
      Patch result = new Patch(id, content);
      initialize(result);
      return result;
    }

    public class Patch extends SupersketchysketchRequest<com.google.api.services.supersketchysketch.model.SRLCourse> {

      private static final String REST_PATH = "srl_course";

      /**
       * Create a request for the method "courses.patch".
       *
       * This request holds the parameters needed by the the supersketchysketch server.  After setting
       * any optional parameters, call the {@link Patch#execute()} method to invoke the remote
       * operation. <p> {@link
       * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param id
       * @param content the {@link com.google.api.services.supersketchysketch.model.SRLCourse}
       * @since 1.13
       */
      protected Patch(java.lang.Long id, com.google.api.services.supersketchysketch.model.SRLCourse content) {
        super(Supersketchysketch.this, "PATCH", REST_PATH, content, com.google.api.services.supersketchysketch.model.SRLCourse.class);
        this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      }

      @Override
      public Patch setAlt(java.lang.String alt) {
        return (Patch) super.setAlt(alt);
      }

      @Override
      public Patch setFields(java.lang.String fields) {
        return (Patch) super.setFields(fields);
      }

      @Override
      public Patch setKey(java.lang.String key) {
        return (Patch) super.setKey(key);
      }

      @Override
      public Patch setOauthToken(java.lang.String oauthToken) {
        return (Patch) super.setOauthToken(oauthToken);
      }

      @Override
      public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Patch) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Patch setQuotaUser(java.lang.String quotaUser) {
        return (Patch) super.setQuotaUser(quotaUser);
      }

      @Override
      public Patch setUserIp(java.lang.String userIp) {
        return (Patch) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long id;

      /**

       */
      public java.lang.Long getId() {
        return id;
      }

      public Patch setId(java.lang.Long id) {
        this.id = id;
        return this;
      }

      @Override
      public Patch set(String parameterName, Object value) {
        return (Patch) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "courses.update".
     *
     * This request holds the parameters needed by the the supersketchysketch server.  After setting any
     * optional parameters, call the {@link Update#execute()} method to invoke the remote operation.
     *
     * @param content the {@link com.google.api.services.supersketchysketch.model.SRLCourse}
     * @return the request
     */
    public Update update(com.google.api.services.supersketchysketch.model.SRLCourse content) throws java.io.IOException {
      Update result = new Update(content);
      initialize(result);
      return result;
    }

    public class Update extends SupersketchysketchRequest<com.google.api.services.supersketchysketch.model.SRLCourse> {

      private static final String REST_PATH = "srl_course";

      /**
       * Create a request for the method "courses.update".
       *
       * This request holds the parameters needed by the the supersketchysketch server.  After setting
       * any optional parameters, call the {@link Update#execute()} method to invoke the remote
       * operation. <p> {@link
       * Update#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.google.api.services.supersketchysketch.model.SRLCourse}
       * @since 1.13
       */
      protected Update(com.google.api.services.supersketchysketch.model.SRLCourse content) {
        super(Supersketchysketch.this, "PUT", REST_PATH, content, com.google.api.services.supersketchysketch.model.SRLCourse.class);
      }

      @Override
      public Update setAlt(java.lang.String alt) {
        return (Update) super.setAlt(alt);
      }

      @Override
      public Update setFields(java.lang.String fields) {
        return (Update) super.setFields(fields);
      }

      @Override
      public Update setKey(java.lang.String key) {
        return (Update) super.setKey(key);
      }

      @Override
      public Update setOauthToken(java.lang.String oauthToken) {
        return (Update) super.setOauthToken(oauthToken);
      }

      @Override
      public Update setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Update) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Update setQuotaUser(java.lang.String quotaUser) {
        return (Update) super.setQuotaUser(quotaUser);
      }

      @Override
      public Update setUserIp(java.lang.String userIp) {
        return (Update) super.setUserIp(userIp);
      }

      @Override
      public Update set(String parameterName, Object value) {
        return (Update) super.set(parameterName, value);
      }
    }

    /**
     * An accessor for creating requests from the Assigments collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code Supersketchysketch supersketchysketch = new Supersketchysketch(...);}
     *   {@code Supersketchysketch.Assigments.List request = supersketchysketch.assigments().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Assigments assigments() {
      return new Assigments();
    }

    /**
     * The "assigments" collection of methods.
     */
    public class Assigments {

      /**
       * Create a request for the method "assigments.update".
       *
       * This request holds the parameters needed by the the supersketchysketch server.  After setting any
       * optional parameters, call the {@link Update#execute()} method to invoke the remote operation.
       *
       * @param courseId
       * @param content the {@link com.google.api.services.supersketchysketch.model.SRLAssignment}
       * @return the request
       */
      public Update update(java.lang.Long courseId, com.google.api.services.supersketchysketch.model.SRLAssignment content) throws java.io.IOException {
        Update result = new Update(courseId, content);
        initialize(result);
        return result;
      }

      public class Update extends SupersketchysketchRequest<com.google.api.services.supersketchysketch.model.SRLAssignment> {

        private static final String REST_PATH = "srl_course/{courseId}/srl_assignment";

        /**
         * Create a request for the method "assigments.update".
         *
         * This request holds the parameters needed by the the supersketchysketch server.  After setting
         * any optional parameters, call the {@link Update#execute()} method to invoke the remote
         * operation. <p> {@link
         * Update#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param courseId
         * @param content the {@link com.google.api.services.supersketchysketch.model.SRLAssignment}
         * @since 1.13
         */
        protected Update(java.lang.Long courseId, com.google.api.services.supersketchysketch.model.SRLAssignment content) {
          super(Supersketchysketch.this, "PUT", REST_PATH, content, com.google.api.services.supersketchysketch.model.SRLAssignment.class);
          this.courseId = com.google.api.client.util.Preconditions.checkNotNull(courseId, "Required parameter courseId must be specified.");
        }

        @Override
        public Update setAlt(java.lang.String alt) {
          return (Update) super.setAlt(alt);
        }

        @Override
        public Update setFields(java.lang.String fields) {
          return (Update) super.setFields(fields);
        }

        @Override
        public Update setKey(java.lang.String key) {
          return (Update) super.setKey(key);
        }

        @Override
        public Update setOauthToken(java.lang.String oauthToken) {
          return (Update) super.setOauthToken(oauthToken);
        }

        @Override
        public Update setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Update) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Update setQuotaUser(java.lang.String quotaUser) {
          return (Update) super.setQuotaUser(quotaUser);
        }

        @Override
        public Update setUserIp(java.lang.String userIp) {
          return (Update) super.setUserIp(userIp);
        }

        @com.google.api.client.util.Key
        private java.lang.Long courseId;

        /**

         */
        public java.lang.Long getCourseId() {
          return courseId;
        }

        public Update setCourseId(java.lang.Long courseId) {
          this.courseId = courseId;
          return this;
        }

        @Override
        public Update set(String parameterName, Object value) {
          return (Update) super.set(parameterName, value);
        }
      }

    }
    /**
     * An accessor for creating requests from the Assignments collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code Supersketchysketch supersketchysketch = new Supersketchysketch(...);}
     *   {@code Supersketchysketch.Assignments.List request = supersketchysketch.assignments().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Assignments assignments() {
      return new Assignments();
    }

    /**
     * The "assignments" collection of methods.
     */
    public class Assignments {

      /**
       * Create a request for the method "assignments.add".
       *
       * This request holds the parameters needed by the the supersketchysketch server.  After setting any
       * optional parameters, call the {@link Add#execute()} method to invoke the remote operation.
       *
       * @param courseId
       * @param content the {@link com.google.api.services.supersketchysketch.model.SRLAssignment}
       * @return the request
       */
      public Add add(java.lang.Long courseId, com.google.api.services.supersketchysketch.model.SRLAssignment content) throws java.io.IOException {
        Add result = new Add(courseId, content);
        initialize(result);
        return result;
      }

      public class Add extends SupersketchysketchRequest<com.google.api.services.supersketchysketch.model.SRLAssignment> {

        private static final String REST_PATH = "srl_course/{courseId}/srl_assignment";

        /**
         * Create a request for the method "assignments.add".
         *
         * This request holds the parameters needed by the the supersketchysketch server.  After setting
         * any optional parameters, call the {@link Add#execute()} method to invoke the remote operation.
         * <p> {@link
         * Add#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
         * called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param courseId
         * @param content the {@link com.google.api.services.supersketchysketch.model.SRLAssignment}
         * @since 1.13
         */
        protected Add(java.lang.Long courseId, com.google.api.services.supersketchysketch.model.SRLAssignment content) {
          super(Supersketchysketch.this, "POST", REST_PATH, content, com.google.api.services.supersketchysketch.model.SRLAssignment.class);
          this.courseId = com.google.api.client.util.Preconditions.checkNotNull(courseId, "Required parameter courseId must be specified.");
        }

        @Override
        public Add setAlt(java.lang.String alt) {
          return (Add) super.setAlt(alt);
        }

        @Override
        public Add setFields(java.lang.String fields) {
          return (Add) super.setFields(fields);
        }

        @Override
        public Add setKey(java.lang.String key) {
          return (Add) super.setKey(key);
        }

        @Override
        public Add setOauthToken(java.lang.String oauthToken) {
          return (Add) super.setOauthToken(oauthToken);
        }

        @Override
        public Add setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Add) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Add setQuotaUser(java.lang.String quotaUser) {
          return (Add) super.setQuotaUser(quotaUser);
        }

        @Override
        public Add setUserIp(java.lang.String userIp) {
          return (Add) super.setUserIp(userIp);
        }

        @com.google.api.client.util.Key
        private java.lang.Long courseId;

        /**

         */
        public java.lang.Long getCourseId() {
          return courseId;
        }

        public Add setCourseId(java.lang.Long courseId) {
          this.courseId = courseId;
          return this;
        }

        @Override
        public Add set(String parameterName, Object value) {
          return (Add) super.set(parameterName, value);
        }
      }
      /**
       * Create a request for the method "assignments.delete".
       *
       * This request holds the parameters needed by the the supersketchysketch server.  After setting any
       * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
       *
       * @param courseId
       * @param assignmentId
       * @return the request
       */
      public Delete delete(java.lang.Long courseId, java.lang.Long assignmentId) throws java.io.IOException {
        Delete result = new Delete(courseId, assignmentId);
        initialize(result);
        return result;
      }

      public class Delete extends SupersketchysketchRequest<com.google.api.services.supersketchysketch.model.SRLAssignment> {

        private static final String REST_PATH = "srl_course/{courseId}/srl_assignment/{assignmentId}";

        /**
         * Create a request for the method "assignments.delete".
         *
         * This request holds the parameters needed by the the supersketchysketch server.  After setting
         * any optional parameters, call the {@link Delete#execute()} method to invoke the remote
         * operation. <p> {@link
         * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param courseId
         * @param assignmentId
         * @since 1.13
         */
        protected Delete(java.lang.Long courseId, java.lang.Long assignmentId) {
          super(Supersketchysketch.this, "DELETE", REST_PATH, null, com.google.api.services.supersketchysketch.model.SRLAssignment.class);
          this.courseId = com.google.api.client.util.Preconditions.checkNotNull(courseId, "Required parameter courseId must be specified.");
          this.assignmentId = com.google.api.client.util.Preconditions.checkNotNull(assignmentId, "Required parameter assignmentId must be specified.");
        }

        @Override
        public Delete setAlt(java.lang.String alt) {
          return (Delete) super.setAlt(alt);
        }

        @Override
        public Delete setFields(java.lang.String fields) {
          return (Delete) super.setFields(fields);
        }

        @Override
        public Delete setKey(java.lang.String key) {
          return (Delete) super.setKey(key);
        }

        @Override
        public Delete setOauthToken(java.lang.String oauthToken) {
          return (Delete) super.setOauthToken(oauthToken);
        }

        @Override
        public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Delete) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Delete setQuotaUser(java.lang.String quotaUser) {
          return (Delete) super.setQuotaUser(quotaUser);
        }

        @Override
        public Delete setUserIp(java.lang.String userIp) {
          return (Delete) super.setUserIp(userIp);
        }

        @com.google.api.client.util.Key
        private java.lang.Long courseId;

        /**

         */
        public java.lang.Long getCourseId() {
          return courseId;
        }

        public Delete setCourseId(java.lang.Long courseId) {
          this.courseId = courseId;
          return this;
        }

        @com.google.api.client.util.Key
        private java.lang.Long assignmentId;

        /**

         */
        public java.lang.Long getAssignmentId() {
          return assignmentId;
        }

        public Delete setAssignmentId(java.lang.Long assignmentId) {
          this.assignmentId = assignmentId;
          return this;
        }

        @Override
        public Delete set(String parameterName, Object value) {
          return (Delete) super.set(parameterName, value);
        }
      }
      /**
       * Create a request for the method "assignments.get".
       *
       * This request holds the parameters needed by the the supersketchysketch server.  After setting any
       * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
       *
       * @param courseId
       * @param assignmentId
       * @return the request
       */
      public Get get(java.lang.Long courseId, java.lang.Long assignmentId) throws java.io.IOException {
        Get result = new Get(courseId, assignmentId);
        initialize(result);
        return result;
      }

      public class Get extends SupersketchysketchRequest<com.google.api.services.supersketchysketch.model.SRLAssignment> {

        private static final String REST_PATH = "srl_course/{courseId}/srl_assignment/{assignmentId}";

        /**
         * Create a request for the method "assignments.get".
         *
         * This request holds the parameters needed by the the supersketchysketch server.  After setting
         * any optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
         * <p> {@link
         * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
         * called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param courseId
         * @param assignmentId
         * @since 1.13
         */
        protected Get(java.lang.Long courseId, java.lang.Long assignmentId) {
          super(Supersketchysketch.this, "GET", REST_PATH, null, com.google.api.services.supersketchysketch.model.SRLAssignment.class);
          this.courseId = com.google.api.client.util.Preconditions.checkNotNull(courseId, "Required parameter courseId must be specified.");
          this.assignmentId = com.google.api.client.util.Preconditions.checkNotNull(assignmentId, "Required parameter assignmentId must be specified.");
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public Get setAlt(java.lang.String alt) {
          return (Get) super.setAlt(alt);
        }

        @Override
        public Get setFields(java.lang.String fields) {
          return (Get) super.setFields(fields);
        }

        @Override
        public Get setKey(java.lang.String key) {
          return (Get) super.setKey(key);
        }

        @Override
        public Get setOauthToken(java.lang.String oauthToken) {
          return (Get) super.setOauthToken(oauthToken);
        }

        @Override
        public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Get) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Get setQuotaUser(java.lang.String quotaUser) {
          return (Get) super.setQuotaUser(quotaUser);
        }

        @Override
        public Get setUserIp(java.lang.String userIp) {
          return (Get) super.setUserIp(userIp);
        }

        @com.google.api.client.util.Key
        private java.lang.Long courseId;

        /**

         */
        public java.lang.Long getCourseId() {
          return courseId;
        }

        public Get setCourseId(java.lang.Long courseId) {
          this.courseId = courseId;
          return this;
        }

        @com.google.api.client.util.Key
        private java.lang.Long assignmentId;

        /**

         */
        public java.lang.Long getAssignmentId() {
          return assignmentId;
        }

        public Get setAssignmentId(java.lang.Long assignmentId) {
          this.assignmentId = assignmentId;
          return this;
        }

        @Override
        public Get set(String parameterName, Object value) {
          return (Get) super.set(parameterName, value);
        }
      }
      /**
       * Create a request for the method "assignments.list".
       *
       * This request holds the parameters needed by the the supersketchysketch server.  After setting any
       * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
       *
       * @param courseId
       * @return the request
       */
      public List list(java.lang.Long courseId) throws java.io.IOException {
        List result = new List(courseId);
        initialize(result);
        return result;
      }

      public class List extends SupersketchysketchRequest<com.google.api.services.supersketchysketch.model.SRLAssignmentCollection> {

        private static final String REST_PATH = "srl_course/{courseId}/srl_assignment";

        /**
         * Create a request for the method "assignments.list".
         *
         * This request holds the parameters needed by the the supersketchysketch server.  After setting
         * any optional parameters, call the {@link List#execute()} method to invoke the remote operation.
         * <p> {@link
         * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
         * called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param courseId
         * @since 1.13
         */
        protected List(java.lang.Long courseId) {
          super(Supersketchysketch.this, "GET", REST_PATH, null, com.google.api.services.supersketchysketch.model.SRLAssignmentCollection.class);
          this.courseId = com.google.api.client.util.Preconditions.checkNotNull(courseId, "Required parameter courseId must be specified.");
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public List setAlt(java.lang.String alt) {
          return (List) super.setAlt(alt);
        }

        @Override
        public List setFields(java.lang.String fields) {
          return (List) super.setFields(fields);
        }

        @Override
        public List setKey(java.lang.String key) {
          return (List) super.setKey(key);
        }

        @Override
        public List setOauthToken(java.lang.String oauthToken) {
          return (List) super.setOauthToken(oauthToken);
        }

        @Override
        public List setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (List) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public List setQuotaUser(java.lang.String quotaUser) {
          return (List) super.setQuotaUser(quotaUser);
        }

        @Override
        public List setUserIp(java.lang.String userIp) {
          return (List) super.setUserIp(userIp);
        }

        @com.google.api.client.util.Key
        private java.lang.Long courseId;

        /**

         */
        public java.lang.Long getCourseId() {
          return courseId;
        }

        public List setCourseId(java.lang.Long courseId) {
          this.courseId = courseId;
          return this;
        }

        @Override
        public List set(String parameterName, Object value) {
          return (List) super.set(parameterName, value);
        }
      }

      /**
       * An accessor for creating requests from the Questions collection.
       *
       * <p>The typical use is:</p>
       * <pre>
       *   {@code Supersketchysketch supersketchysketch = new Supersketchysketch(...);}
       *   {@code Supersketchysketch.Questions.List request = supersketchysketch.questions().list(parameters ...)}
       * </pre>
       *
       * @return the resource collection
       */
      public Questions questions() {
        return new Questions();
      }

      /**
       * The "questions" collection of methods.
       */
      public class Questions {

        /**
         * Create a request for the method "questions.delete".
         *
         * This request holds the parameters needed by the the supersketchysketch server.  After setting any
         * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
         *
         * @param courseId
         * @param assignmentId
         * @param id
         * @return the request
         */
        public Delete delete(java.lang.Long courseId, java.lang.Long assignmentId, java.lang.Long id) throws java.io.IOException {
          Delete result = new Delete(courseId, assignmentId, id);
          initialize(result);
          return result;
        }

        public class Delete extends SupersketchysketchRequest<com.google.api.services.supersketchysketch.model.SRLQuestion> {

          private static final String REST_PATH = "srl_course/{courseId}/srl_assignment/{assignmentId}/srl_question/{id}";

          /**
           * Create a request for the method "questions.delete".
           *
           * This request holds the parameters needed by the the supersketchysketch server.  After setting
           * any optional parameters, call the {@link Delete#execute()} method to invoke the remote
           * operation. <p> {@link
           * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param courseId
           * @param assignmentId
           * @param id
           * @since 1.13
           */
          protected Delete(java.lang.Long courseId, java.lang.Long assignmentId, java.lang.Long id) {
            super(Supersketchysketch.this, "DELETE", REST_PATH, null, com.google.api.services.supersketchysketch.model.SRLQuestion.class);
            this.courseId = com.google.api.client.util.Preconditions.checkNotNull(courseId, "Required parameter courseId must be specified.");
            this.assignmentId = com.google.api.client.util.Preconditions.checkNotNull(assignmentId, "Required parameter assignmentId must be specified.");
            this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
          }

          @Override
          public Delete setAlt(java.lang.String alt) {
            return (Delete) super.setAlt(alt);
          }

          @Override
          public Delete setFields(java.lang.String fields) {
            return (Delete) super.setFields(fields);
          }

          @Override
          public Delete setKey(java.lang.String key) {
            return (Delete) super.setKey(key);
          }

          @Override
          public Delete setOauthToken(java.lang.String oauthToken) {
            return (Delete) super.setOauthToken(oauthToken);
          }

          @Override
          public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Delete) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Delete setQuotaUser(java.lang.String quotaUser) {
            return (Delete) super.setQuotaUser(quotaUser);
          }

          @Override
          public Delete setUserIp(java.lang.String userIp) {
            return (Delete) super.setUserIp(userIp);
          }

          @com.google.api.client.util.Key
          private java.lang.Long courseId;

          /**

           */
          public java.lang.Long getCourseId() {
            return courseId;
          }

          public Delete setCourseId(java.lang.Long courseId) {
            this.courseId = courseId;
            return this;
          }

          @com.google.api.client.util.Key
          private java.lang.Long assignmentId;

          /**

           */
          public java.lang.Long getAssignmentId() {
            return assignmentId;
          }

          public Delete setAssignmentId(java.lang.Long assignmentId) {
            this.assignmentId = assignmentId;
            return this;
          }

          @com.google.api.client.util.Key
          private java.lang.Long id;

          /**

           */
          public java.lang.Long getId() {
            return id;
          }

          public Delete setId(java.lang.Long id) {
            this.id = id;
            return this;
          }

          @Override
          public Delete set(String parameterName, Object value) {
            return (Delete) super.set(parameterName, value);
          }
        }
        /**
         * Create a request for the method "questions.get".
         *
         * This request holds the parameters needed by the the supersketchysketch server.  After setting any
         * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
         *
         * @param courseId
         * @param assignmentId
         * @param id
         * @return the request
         */
        public Get get(java.lang.Long courseId, java.lang.Long assignmentId, java.lang.Long id) throws java.io.IOException {
          Get result = new Get(courseId, assignmentId, id);
          initialize(result);
          return result;
        }

        public class Get extends SupersketchysketchRequest<com.google.api.services.supersketchysketch.model.SRLQuestion> {

          private static final String REST_PATH = "srl_course/{courseId}/srl_assignment/{assignmentId}/srl_question/{id}";

          /**
           * Create a request for the method "questions.get".
           *
           * This request holds the parameters needed by the the supersketchysketch server.  After setting
           * any optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
           * <p> {@link
           * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
           * called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param courseId
           * @param assignmentId
           * @param id
           * @since 1.13
           */
          protected Get(java.lang.Long courseId, java.lang.Long assignmentId, java.lang.Long id) {
            super(Supersketchysketch.this, "GET", REST_PATH, null, com.google.api.services.supersketchysketch.model.SRLQuestion.class);
            this.courseId = com.google.api.client.util.Preconditions.checkNotNull(courseId, "Required parameter courseId must be specified.");
            this.assignmentId = com.google.api.client.util.Preconditions.checkNotNull(assignmentId, "Required parameter assignmentId must be specified.");
            this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public Get setAlt(java.lang.String alt) {
            return (Get) super.setAlt(alt);
          }

          @Override
          public Get setFields(java.lang.String fields) {
            return (Get) super.setFields(fields);
          }

          @Override
          public Get setKey(java.lang.String key) {
            return (Get) super.setKey(key);
          }

          @Override
          public Get setOauthToken(java.lang.String oauthToken) {
            return (Get) super.setOauthToken(oauthToken);
          }

          @Override
          public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Get) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Get setQuotaUser(java.lang.String quotaUser) {
            return (Get) super.setQuotaUser(quotaUser);
          }

          @Override
          public Get setUserIp(java.lang.String userIp) {
            return (Get) super.setUserIp(userIp);
          }

          @com.google.api.client.util.Key
          private java.lang.Long courseId;

          /**

           */
          public java.lang.Long getCourseId() {
            return courseId;
          }

          public Get setCourseId(java.lang.Long courseId) {
            this.courseId = courseId;
            return this;
          }

          @com.google.api.client.util.Key
          private java.lang.Long assignmentId;

          /**

           */
          public java.lang.Long getAssignmentId() {
            return assignmentId;
          }

          public Get setAssignmentId(java.lang.Long assignmentId) {
            this.assignmentId = assignmentId;
            return this;
          }

          @com.google.api.client.util.Key
          private java.lang.Long id;

          /**

           */
          public java.lang.Long getId() {
            return id;
          }

          public Get setId(java.lang.Long id) {
            this.id = id;
            return this;
          }

          @Override
          public Get set(String parameterName, Object value) {
            return (Get) super.set(parameterName, value);
          }
        }
        /**
         * Create a request for the method "questions.insert".
         *
         * This request holds the parameters needed by the the supersketchysketch server.  After setting any
         * optional parameters, call the {@link Insert#execute()} method to invoke the remote operation.
         *
         * @param courseId
         * @param assignmentId
         * @param content the {@link com.google.api.services.supersketchysketch.model.SRLQuestion}
         * @return the request
         */
        public Insert insert(java.lang.Long courseId, java.lang.Long assignmentId, com.google.api.services.supersketchysketch.model.SRLQuestion content) throws java.io.IOException {
          Insert result = new Insert(courseId, assignmentId, content);
          initialize(result);
          return result;
        }

        public class Insert extends SupersketchysketchRequest<com.google.api.services.supersketchysketch.model.SRLQuestion> {

          private static final String REST_PATH = "srl_course/{courseId}/srl_assignment/{assignmentId}/srl_question";

          /**
           * Create a request for the method "questions.insert".
           *
           * This request holds the parameters needed by the the supersketchysketch server.  After setting
           * any optional parameters, call the {@link Insert#execute()} method to invoke the remote
           * operation. <p> {@link
           * Insert#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param courseId
           * @param assignmentId
           * @param content the {@link com.google.api.services.supersketchysketch.model.SRLQuestion}
           * @since 1.13
           */
          protected Insert(java.lang.Long courseId, java.lang.Long assignmentId, com.google.api.services.supersketchysketch.model.SRLQuestion content) {
            super(Supersketchysketch.this, "POST", REST_PATH, content, com.google.api.services.supersketchysketch.model.SRLQuestion.class);
            this.courseId = com.google.api.client.util.Preconditions.checkNotNull(courseId, "Required parameter courseId must be specified.");
            this.assignmentId = com.google.api.client.util.Preconditions.checkNotNull(assignmentId, "Required parameter assignmentId must be specified.");
          }

          @Override
          public Insert setAlt(java.lang.String alt) {
            return (Insert) super.setAlt(alt);
          }

          @Override
          public Insert setFields(java.lang.String fields) {
            return (Insert) super.setFields(fields);
          }

          @Override
          public Insert setKey(java.lang.String key) {
            return (Insert) super.setKey(key);
          }

          @Override
          public Insert setOauthToken(java.lang.String oauthToken) {
            return (Insert) super.setOauthToken(oauthToken);
          }

          @Override
          public Insert setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Insert) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Insert setQuotaUser(java.lang.String quotaUser) {
            return (Insert) super.setQuotaUser(quotaUser);
          }

          @Override
          public Insert setUserIp(java.lang.String userIp) {
            return (Insert) super.setUserIp(userIp);
          }

          @com.google.api.client.util.Key
          private java.lang.Long courseId;

          /**

           */
          public java.lang.Long getCourseId() {
            return courseId;
          }

          public Insert setCourseId(java.lang.Long courseId) {
            this.courseId = courseId;
            return this;
          }

          @com.google.api.client.util.Key
          private java.lang.Long assignmentId;

          /**

           */
          public java.lang.Long getAssignmentId() {
            return assignmentId;
          }

          public Insert setAssignmentId(java.lang.Long assignmentId) {
            this.assignmentId = assignmentId;
            return this;
          }

          @Override
          public Insert set(String parameterName, Object value) {
            return (Insert) super.set(parameterName, value);
          }
        }
        /**
         * Create a request for the method "questions.list".
         *
         * This request holds the parameters needed by the the supersketchysketch server.  After setting any
         * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
         *
         * @param courseId
         * @param assignmentId
         * @return the request
         */
        public List list(java.lang.Long courseId, java.lang.Long assignmentId) throws java.io.IOException {
          List result = new List(courseId, assignmentId);
          initialize(result);
          return result;
        }

        public class List extends SupersketchysketchRequest<com.google.api.services.supersketchysketch.model.SRLQuestionCollection> {

          private static final String REST_PATH = "srl_course/{courseId}/srl_assignment/{assignmentId}/srl_question";

          /**
           * Create a request for the method "questions.list".
           *
           * This request holds the parameters needed by the the supersketchysketch server.  After setting
           * any optional parameters, call the {@link List#execute()} method to invoke the remote operation.
           * <p> {@link
           * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
           * called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param courseId
           * @param assignmentId
           * @since 1.13
           */
          protected List(java.lang.Long courseId, java.lang.Long assignmentId) {
            super(Supersketchysketch.this, "GET", REST_PATH, null, com.google.api.services.supersketchysketch.model.SRLQuestionCollection.class);
            this.courseId = com.google.api.client.util.Preconditions.checkNotNull(courseId, "Required parameter courseId must be specified.");
            this.assignmentId = com.google.api.client.util.Preconditions.checkNotNull(assignmentId, "Required parameter assignmentId must be specified.");
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public List setAlt(java.lang.String alt) {
            return (List) super.setAlt(alt);
          }

          @Override
          public List setFields(java.lang.String fields) {
            return (List) super.setFields(fields);
          }

          @Override
          public List setKey(java.lang.String key) {
            return (List) super.setKey(key);
          }

          @Override
          public List setOauthToken(java.lang.String oauthToken) {
            return (List) super.setOauthToken(oauthToken);
          }

          @Override
          public List setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (List) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public List setQuotaUser(java.lang.String quotaUser) {
            return (List) super.setQuotaUser(quotaUser);
          }

          @Override
          public List setUserIp(java.lang.String userIp) {
            return (List) super.setUserIp(userIp);
          }

          @com.google.api.client.util.Key
          private java.lang.Long courseId;

          /**

           */
          public java.lang.Long getCourseId() {
            return courseId;
          }

          public List setCourseId(java.lang.Long courseId) {
            this.courseId = courseId;
            return this;
          }

          @com.google.api.client.util.Key
          private java.lang.Long assignmentId;

          /**

           */
          public java.lang.Long getAssignmentId() {
            return assignmentId;
          }

          public List setAssignmentId(java.lang.Long assignmentId) {
            this.assignmentId = assignmentId;
            return this;
          }

          @Override
          public List set(String parameterName, Object value) {
            return (List) super.set(parameterName, value);
          }
        }
        /**
         * Create a request for the method "questions.patch".
         *
         * This request holds the parameters needed by the the supersketchysketch server.  After setting any
         * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
         *
         * @param courseId
         * @param assignmentId
         * @param id
         * @param content the {@link com.google.api.services.supersketchysketch.model.SRLQuestion}
         * @return the request
         */
        public Patch patch(java.lang.Long courseId, java.lang.Long assignmentId, java.lang.Long id, com.google.api.services.supersketchysketch.model.SRLQuestion content) throws java.io.IOException {
          Patch result = new Patch(courseId, assignmentId, id, content);
          initialize(result);
          return result;
        }

        public class Patch extends SupersketchysketchRequest<com.google.api.services.supersketchysketch.model.SRLQuestion> {

          private static final String REST_PATH = "srl_course/{courseId}/srl_assignment/{assignmentId}/srl_question";

          /**
           * Create a request for the method "questions.patch".
           *
           * This request holds the parameters needed by the the supersketchysketch server.  After setting
           * any optional parameters, call the {@link Patch#execute()} method to invoke the remote
           * operation. <p> {@link
           * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param courseId
           * @param assignmentId
           * @param id
           * @param content the {@link com.google.api.services.supersketchysketch.model.SRLQuestion}
           * @since 1.13
           */
          protected Patch(java.lang.Long courseId, java.lang.Long assignmentId, java.lang.Long id, com.google.api.services.supersketchysketch.model.SRLQuestion content) {
            super(Supersketchysketch.this, "PATCH", REST_PATH, content, com.google.api.services.supersketchysketch.model.SRLQuestion.class);
            this.courseId = com.google.api.client.util.Preconditions.checkNotNull(courseId, "Required parameter courseId must be specified.");
            this.assignmentId = com.google.api.client.util.Preconditions.checkNotNull(assignmentId, "Required parameter assignmentId must be specified.");
            this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
          }

          @Override
          public Patch setAlt(java.lang.String alt) {
            return (Patch) super.setAlt(alt);
          }

          @Override
          public Patch setFields(java.lang.String fields) {
            return (Patch) super.setFields(fields);
          }

          @Override
          public Patch setKey(java.lang.String key) {
            return (Patch) super.setKey(key);
          }

          @Override
          public Patch setOauthToken(java.lang.String oauthToken) {
            return (Patch) super.setOauthToken(oauthToken);
          }

          @Override
          public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Patch) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Patch setQuotaUser(java.lang.String quotaUser) {
            return (Patch) super.setQuotaUser(quotaUser);
          }

          @Override
          public Patch setUserIp(java.lang.String userIp) {
            return (Patch) super.setUserIp(userIp);
          }

          @com.google.api.client.util.Key
          private java.lang.Long courseId;

          /**

           */
          public java.lang.Long getCourseId() {
            return courseId;
          }

          public Patch setCourseId(java.lang.Long courseId) {
            this.courseId = courseId;
            return this;
          }

          @com.google.api.client.util.Key
          private java.lang.Long assignmentId;

          /**

           */
          public java.lang.Long getAssignmentId() {
            return assignmentId;
          }

          public Patch setAssignmentId(java.lang.Long assignmentId) {
            this.assignmentId = assignmentId;
            return this;
          }

          @com.google.api.client.util.Key
          private java.lang.Long id;

          /**

           */
          public java.lang.Long getId() {
            return id;
          }

          public Patch setId(java.lang.Long id) {
            this.id = id;
            return this;
          }

          @Override
          public Patch set(String parameterName, Object value) {
            return (Patch) super.set(parameterName, value);
          }
        }
        /**
         * Create a request for the method "questions.update".
         *
         * This request holds the parameters needed by the the supersketchysketch server.  After setting any
         * optional parameters, call the {@link Update#execute()} method to invoke the remote operation.
         *
         * @param courseId
         * @param assignmentId
         * @param content the {@link com.google.api.services.supersketchysketch.model.SRLQuestion}
         * @return the request
         */
        public Update update(java.lang.Long courseId, java.lang.Long assignmentId, com.google.api.services.supersketchysketch.model.SRLQuestion content) throws java.io.IOException {
          Update result = new Update(courseId, assignmentId, content);
          initialize(result);
          return result;
        }

        public class Update extends SupersketchysketchRequest<com.google.api.services.supersketchysketch.model.SRLQuestion> {

          private static final String REST_PATH = "srl_course/{courseId}/srl_assignment/{assignmentId}/srl_question";

          /**
           * Create a request for the method "questions.update".
           *
           * This request holds the parameters needed by the the supersketchysketch server.  After setting
           * any optional parameters, call the {@link Update#execute()} method to invoke the remote
           * operation. <p> {@link
           * Update#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param courseId
           * @param assignmentId
           * @param content the {@link com.google.api.services.supersketchysketch.model.SRLQuestion}
           * @since 1.13
           */
          protected Update(java.lang.Long courseId, java.lang.Long assignmentId, com.google.api.services.supersketchysketch.model.SRLQuestion content) {
            super(Supersketchysketch.this, "PUT", REST_PATH, content, com.google.api.services.supersketchysketch.model.SRLQuestion.class);
            this.courseId = com.google.api.client.util.Preconditions.checkNotNull(courseId, "Required parameter courseId must be specified.");
            this.assignmentId = com.google.api.client.util.Preconditions.checkNotNull(assignmentId, "Required parameter assignmentId must be specified.");
          }

          @Override
          public Update setAlt(java.lang.String alt) {
            return (Update) super.setAlt(alt);
          }

          @Override
          public Update setFields(java.lang.String fields) {
            return (Update) super.setFields(fields);
          }

          @Override
          public Update setKey(java.lang.String key) {
            return (Update) super.setKey(key);
          }

          @Override
          public Update setOauthToken(java.lang.String oauthToken) {
            return (Update) super.setOauthToken(oauthToken);
          }

          @Override
          public Update setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Update) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Update setQuotaUser(java.lang.String quotaUser) {
            return (Update) super.setQuotaUser(quotaUser);
          }

          @Override
          public Update setUserIp(java.lang.String userIp) {
            return (Update) super.setUserIp(userIp);
          }

          @com.google.api.client.util.Key
          private java.lang.Long courseId;

          /**

           */
          public java.lang.Long getCourseId() {
            return courseId;
          }

          public Update setCourseId(java.lang.Long courseId) {
            this.courseId = courseId;
            return this;
          }

          @com.google.api.client.util.Key
          private java.lang.Long assignmentId;

          /**

           */
          public java.lang.Long getAssignmentId() {
            return assignmentId;
          }

          public Update setAssignmentId(java.lang.Long assignmentId) {
            this.assignmentId = assignmentId;
            return this;
          }

          @Override
          public Update set(String parameterName, Object value) {
            return (Update) super.set(parameterName, value);
          }
        }

      }
    }
    /**
     * An accessor for creating requests from the Users collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code Supersketchysketch supersketchysketch = new Supersketchysketch(...);}
     *   {@code Supersketchysketch.Users.List request = supersketchysketch.users().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Users users() {
      return new Users();
    }

    /**
     * The "users" collection of methods.
     */
    public class Users {

      /**
       * Create a request for the method "users.insert".
       *
       * This request holds the parameters needed by the the supersketchysketch server.  After setting any
       * optional parameters, call the {@link Insert#execute()} method to invoke the remote operation.
       *
       * @param courseId
       * @param content the {@link com.google.api.services.supersketchysketch.model.SRLUser}
       * @return the request
       */
      public Insert insert(java.lang.Long courseId, com.google.api.services.supersketchysketch.model.SRLUser content) throws java.io.IOException {
        Insert result = new Insert(courseId, content);
        initialize(result);
        return result;
      }

      public class Insert extends SupersketchysketchRequest<com.google.api.services.supersketchysketch.model.SRLUser> {

        private static final String REST_PATH = "srl_course/{courseId}/users";

        /**
         * Create a request for the method "users.insert".
         *
         * This request holds the parameters needed by the the supersketchysketch server.  After setting
         * any optional parameters, call the {@link Insert#execute()} method to invoke the remote
         * operation. <p> {@link
         * Insert#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param courseId
         * @param content the {@link com.google.api.services.supersketchysketch.model.SRLUser}
         * @since 1.13
         */
        protected Insert(java.lang.Long courseId, com.google.api.services.supersketchysketch.model.SRLUser content) {
          super(Supersketchysketch.this, "POST", REST_PATH, content, com.google.api.services.supersketchysketch.model.SRLUser.class);
          this.courseId = com.google.api.client.util.Preconditions.checkNotNull(courseId, "Required parameter courseId must be specified.");
        }

        @Override
        public Insert setAlt(java.lang.String alt) {
          return (Insert) super.setAlt(alt);
        }

        @Override
        public Insert setFields(java.lang.String fields) {
          return (Insert) super.setFields(fields);
        }

        @Override
        public Insert setKey(java.lang.String key) {
          return (Insert) super.setKey(key);
        }

        @Override
        public Insert setOauthToken(java.lang.String oauthToken) {
          return (Insert) super.setOauthToken(oauthToken);
        }

        @Override
        public Insert setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Insert) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Insert setQuotaUser(java.lang.String quotaUser) {
          return (Insert) super.setQuotaUser(quotaUser);
        }

        @Override
        public Insert setUserIp(java.lang.String userIp) {
          return (Insert) super.setUserIp(userIp);
        }

        @com.google.api.client.util.Key
        private java.lang.Long courseId;

        /**

         */
        public java.lang.Long getCourseId() {
          return courseId;
        }

        public Insert setCourseId(java.lang.Long courseId) {
          this.courseId = courseId;
          return this;
        }

        @Override
        public Insert set(String parameterName, Object value) {
          return (Insert) super.set(parameterName, value);
        }
      }
      /**
       * Create a request for the method "users.list".
       *
       * This request holds the parameters needed by the the supersketchysketch server.  After setting any
       * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
       *
       * @param courseId
       * @return the request
       */
      public List list(java.lang.Long courseId) throws java.io.IOException {
        List result = new List(courseId);
        initialize(result);
        return result;
      }

      public class List extends SupersketchysketchRequest<com.google.api.services.supersketchysketch.model.SRLUserCollection> {

        private static final String REST_PATH = "srl_course/{courseId}/users";

        /**
         * Create a request for the method "users.list".
         *
         * This request holds the parameters needed by the the supersketchysketch server.  After setting
         * any optional parameters, call the {@link List#execute()} method to invoke the remote operation.
         * <p> {@link
         * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
         * called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param courseId
         * @since 1.13
         */
        protected List(java.lang.Long courseId) {
          super(Supersketchysketch.this, "GET", REST_PATH, null, com.google.api.services.supersketchysketch.model.SRLUserCollection.class);
          this.courseId = com.google.api.client.util.Preconditions.checkNotNull(courseId, "Required parameter courseId must be specified.");
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public List setAlt(java.lang.String alt) {
          return (List) super.setAlt(alt);
        }

        @Override
        public List setFields(java.lang.String fields) {
          return (List) super.setFields(fields);
        }

        @Override
        public List setKey(java.lang.String key) {
          return (List) super.setKey(key);
        }

        @Override
        public List setOauthToken(java.lang.String oauthToken) {
          return (List) super.setOauthToken(oauthToken);
        }

        @Override
        public List setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (List) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public List setQuotaUser(java.lang.String quotaUser) {
          return (List) super.setQuotaUser(quotaUser);
        }

        @Override
        public List setUserIp(java.lang.String userIp) {
          return (List) super.setUserIp(userIp);
        }

        @com.google.api.client.util.Key
        private java.lang.Long courseId;

        /**

         */
        public java.lang.Long getCourseId() {
          return courseId;
        }

        public List setCourseId(java.lang.Long courseId) {
          this.courseId = courseId;
          return this;
        }

        @Override
        public List set(String parameterName, Object value) {
          return (List) super.set(parameterName, value);
        }
      }

    }
  }

  /**
   * An accessor for creating requests from the Users collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Supersketchysketch supersketchysketch = new Supersketchysketch(...);}
   *   {@code Supersketchysketch.Users.List request = supersketchysketch.users().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Users users() {
    return new Users();
  }

  /**
   * The "users" collection of methods.
   */
  public class Users {

    /**
     * Create a request for the method "users.add".
     *
     * This request holds the parameters needed by the the supersketchysketch server.  After setting any
     * optional parameters, call the {@link Add#execute()} method to invoke the remote operation.
     *
     * @param content the {@link com.google.api.services.supersketchysketch.model.SRLUser}
     * @return the request
     */
    public Add add(com.google.api.services.supersketchysketch.model.SRLUser content) throws java.io.IOException {
      Add result = new Add(content);
      initialize(result);
      return result;
    }

    public class Add extends SupersketchysketchRequest<com.google.api.services.supersketchysketch.model.SRLUser> {

      private static final String REST_PATH = "srl_user";

      /**
       * Create a request for the method "users.add".
       *
       * This request holds the parameters needed by the the supersketchysketch server.  After setting
       * any optional parameters, call the {@link Add#execute()} method to invoke the remote operation.
       * <p> {@link
       * Add#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.google.api.services.supersketchysketch.model.SRLUser}
       * @since 1.13
       */
      protected Add(com.google.api.services.supersketchysketch.model.SRLUser content) {
        super(Supersketchysketch.this, "POST", REST_PATH, content, com.google.api.services.supersketchysketch.model.SRLUser.class);
      }

      @Override
      public Add setAlt(java.lang.String alt) {
        return (Add) super.setAlt(alt);
      }

      @Override
      public Add setFields(java.lang.String fields) {
        return (Add) super.setFields(fields);
      }

      @Override
      public Add setKey(java.lang.String key) {
        return (Add) super.setKey(key);
      }

      @Override
      public Add setOauthToken(java.lang.String oauthToken) {
        return (Add) super.setOauthToken(oauthToken);
      }

      @Override
      public Add setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Add) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Add setQuotaUser(java.lang.String quotaUser) {
        return (Add) super.setQuotaUser(quotaUser);
      }

      @Override
      public Add setUserIp(java.lang.String userIp) {
        return (Add) super.setUserIp(userIp);
      }

      @Override
      public Add set(String parameterName, Object value) {
        return (Add) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "users.delete".
     *
     * This request holds the parameters needed by the the supersketchysketch server.  After setting any
     * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
     *
     * @param id
     * @return the request
     */
    public Delete delete(java.lang.Long id) throws java.io.IOException {
      Delete result = new Delete(id);
      initialize(result);
      return result;
    }

    public class Delete extends SupersketchysketchRequest<com.google.api.services.supersketchysketch.model.SRLUser> {

      private static final String REST_PATH = "srl_user/{id}";

      /**
       * Create a request for the method "users.delete".
       *
       * This request holds the parameters needed by the the supersketchysketch server.  After setting
       * any optional parameters, call the {@link Delete#execute()} method to invoke the remote
       * operation. <p> {@link
       * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param id
       * @since 1.13
       */
      protected Delete(java.lang.Long id) {
        super(Supersketchysketch.this, "DELETE", REST_PATH, null, com.google.api.services.supersketchysketch.model.SRLUser.class);
        this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      }

      @Override
      public Delete setAlt(java.lang.String alt) {
        return (Delete) super.setAlt(alt);
      }

      @Override
      public Delete setFields(java.lang.String fields) {
        return (Delete) super.setFields(fields);
      }

      @Override
      public Delete setKey(java.lang.String key) {
        return (Delete) super.setKey(key);
      }

      @Override
      public Delete setOauthToken(java.lang.String oauthToken) {
        return (Delete) super.setOauthToken(oauthToken);
      }

      @Override
      public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Delete) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Delete setQuotaUser(java.lang.String quotaUser) {
        return (Delete) super.setQuotaUser(quotaUser);
      }

      @Override
      public Delete setUserIp(java.lang.String userIp) {
        return (Delete) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long id;

      /**

       */
      public java.lang.Long getId() {
        return id;
      }

      public Delete setId(java.lang.Long id) {
        this.id = id;
        return this;
      }

      @Override
      public Delete set(String parameterName, Object value) {
        return (Delete) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "users.get".
     *
     * This request holds the parameters needed by the the supersketchysketch server.  After setting any
     * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
     *
     * @param id
     * @return the request
     */
    public Get get(java.lang.Long id) throws java.io.IOException {
      Get result = new Get(id);
      initialize(result);
      return result;
    }

    public class Get extends SupersketchysketchRequest<com.google.api.services.supersketchysketch.model.SRLUser> {

      private static final String REST_PATH = "srl_user/{id}";

      /**
       * Create a request for the method "users.get".
       *
       * This request holds the parameters needed by the the supersketchysketch server.  After setting
       * any optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
       * <p> {@link
       * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param id
       * @since 1.13
       */
      protected Get(java.lang.Long id) {
        super(Supersketchysketch.this, "GET", REST_PATH, null, com.google.api.services.supersketchysketch.model.SRLUser.class);
        this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public Get setAlt(java.lang.String alt) {
        return (Get) super.setAlt(alt);
      }

      @Override
      public Get setFields(java.lang.String fields) {
        return (Get) super.setFields(fields);
      }

      @Override
      public Get setKey(java.lang.String key) {
        return (Get) super.setKey(key);
      }

      @Override
      public Get setOauthToken(java.lang.String oauthToken) {
        return (Get) super.setOauthToken(oauthToken);
      }

      @Override
      public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Get) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Get setQuotaUser(java.lang.String quotaUser) {
        return (Get) super.setQuotaUser(quotaUser);
      }

      @Override
      public Get setUserIp(java.lang.String userIp) {
        return (Get) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long id;

      /**

       */
      public java.lang.Long getId() {
        return id;
      }

      public Get setId(java.lang.Long id) {
        this.id = id;
        return this;
      }

      @Override
      public Get set(String parameterName, Object value) {
        return (Get) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "users.list".
     *
     * This request holds the parameters needed by the the supersketchysketch server.  After setting any
     * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public List list() throws java.io.IOException {
      List result = new List();
      initialize(result);
      return result;
    }

    public class List extends SupersketchysketchRequest<com.google.api.services.supersketchysketch.model.CollectionResponseSRLUser> {

      private static final String REST_PATH = "srl_user";

      /**
       * Create a request for the method "users.list".
       *
       * This request holds the parameters needed by the the supersketchysketch server.  After setting
       * any optional parameters, call the {@link List#execute()} method to invoke the remote operation.
       * <p> {@link
       * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
       * called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected List() {
        super(Supersketchysketch.this, "GET", REST_PATH, null, com.google.api.services.supersketchysketch.model.CollectionResponseSRLUser.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(java.lang.String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(java.lang.String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(java.lang.String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(java.lang.String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(java.lang.String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(java.lang.String userIp) {
        return (List) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String cursor;

      /**

       */
      public java.lang.String getCursor() {
        return cursor;
      }

      public List setCursor(java.lang.String cursor) {
        this.cursor = cursor;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.Integer limit;

      /**

       */
      public java.lang.Integer getLimit() {
        return limit;
      }

      public List setLimit(java.lang.Integer limit) {
        this.limit = limit;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "users.patch".
     *
     * This request holds the parameters needed by the the supersketchysketch server.  After setting any
     * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
     *
     * @param id
     * @param content the {@link com.google.api.services.supersketchysketch.model.SRLUser}
     * @return the request
     */
    public Patch patch(java.lang.Long id, com.google.api.services.supersketchysketch.model.SRLUser content) throws java.io.IOException {
      Patch result = new Patch(id, content);
      initialize(result);
      return result;
    }

    public class Patch extends SupersketchysketchRequest<com.google.api.services.supersketchysketch.model.SRLUser> {

      private static final String REST_PATH = "srl_user";

      /**
       * Create a request for the method "users.patch".
       *
       * This request holds the parameters needed by the the supersketchysketch server.  After setting
       * any optional parameters, call the {@link Patch#execute()} method to invoke the remote
       * operation. <p> {@link
       * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param id
       * @param content the {@link com.google.api.services.supersketchysketch.model.SRLUser}
       * @since 1.13
       */
      protected Patch(java.lang.Long id, com.google.api.services.supersketchysketch.model.SRLUser content) {
        super(Supersketchysketch.this, "PATCH", REST_PATH, content, com.google.api.services.supersketchysketch.model.SRLUser.class);
        this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
      }

      @Override
      public Patch setAlt(java.lang.String alt) {
        return (Patch) super.setAlt(alt);
      }

      @Override
      public Patch setFields(java.lang.String fields) {
        return (Patch) super.setFields(fields);
      }

      @Override
      public Patch setKey(java.lang.String key) {
        return (Patch) super.setKey(key);
      }

      @Override
      public Patch setOauthToken(java.lang.String oauthToken) {
        return (Patch) super.setOauthToken(oauthToken);
      }

      @Override
      public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Patch) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Patch setQuotaUser(java.lang.String quotaUser) {
        return (Patch) super.setQuotaUser(quotaUser);
      }

      @Override
      public Patch setUserIp(java.lang.String userIp) {
        return (Patch) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.Long id;

      /**

       */
      public java.lang.Long getId() {
        return id;
      }

      public Patch setId(java.lang.Long id) {
        this.id = id;
        return this;
      }

      @Override
      public Patch set(String parameterName, Object value) {
        return (Patch) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "users.update".
     *
     * This request holds the parameters needed by the the supersketchysketch server.  After setting any
     * optional parameters, call the {@link Update#execute()} method to invoke the remote operation.
     *
     * @param content the {@link com.google.api.services.supersketchysketch.model.SRLUser}
     * @return the request
     */
    public Update update(com.google.api.services.supersketchysketch.model.SRLUser content) throws java.io.IOException {
      Update result = new Update(content);
      initialize(result);
      return result;
    }

    public class Update extends SupersketchysketchRequest<com.google.api.services.supersketchysketch.model.SRLUser> {

      private static final String REST_PATH = "srl_user";

      /**
       * Create a request for the method "users.update".
       *
       * This request holds the parameters needed by the the supersketchysketch server.  After setting
       * any optional parameters, call the {@link Update#execute()} method to invoke the remote
       * operation. <p> {@link
       * Update#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.google.api.services.supersketchysketch.model.SRLUser}
       * @since 1.13
       */
      protected Update(com.google.api.services.supersketchysketch.model.SRLUser content) {
        super(Supersketchysketch.this, "PUT", REST_PATH, content, com.google.api.services.supersketchysketch.model.SRLUser.class);
      }

      @Override
      public Update setAlt(java.lang.String alt) {
        return (Update) super.setAlt(alt);
      }

      @Override
      public Update setFields(java.lang.String fields) {
        return (Update) super.setFields(fields);
      }

      @Override
      public Update setKey(java.lang.String key) {
        return (Update) super.setKey(key);
      }

      @Override
      public Update setOauthToken(java.lang.String oauthToken) {
        return (Update) super.setOauthToken(oauthToken);
      }

      @Override
      public Update setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (Update) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Update setQuotaUser(java.lang.String quotaUser) {
        return (Update) super.setQuotaUser(quotaUser);
      }

      @Override
      public Update setUserIp(java.lang.String userIp) {
        return (Update) super.setUserIp(userIp);
      }

      @Override
      public Update set(String parameterName, Object value) {
        return (Update) super.set(parameterName, value);
      }
    }

    /**
     * An accessor for creating requests from the Assignments collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code Supersketchysketch supersketchysketch = new Supersketchysketch(...);}
     *   {@code Supersketchysketch.Assignments.List request = supersketchysketch.assignments().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Assignments assignments() {
      return new Assignments();
    }

    /**
     * The "assignments" collection of methods.
     */
    public class Assignments {

      /**
       * An accessor for creating requests from the Questions collection.
       *
       * <p>The typical use is:</p>
       * <pre>
       *   {@code Supersketchysketch supersketchysketch = new Supersketchysketch(...);}
       *   {@code Supersketchysketch.Questions.List request = supersketchysketch.questions().list(parameters ...)}
       * </pre>
       *
       * @return the resource collection
       */
      public Questions questions() {
        return new Questions();
      }

      /**
       * The "questions" collection of methods.
       */
      public class Questions {

        /**
         * An accessor for creating requests from the Submissions collection.
         *
         * <p>The typical use is:</p>
         * <pre>
         *   {@code Supersketchysketch supersketchysketch = new Supersketchysketch(...);}
         *   {@code Supersketchysketch.Submissions.List request = supersketchysketch.submissions().list(parameters ...)}
         * </pre>
         *
         * @return the resource collection
         */
        public Submissions submissions() {
          return new Submissions();
        }

        /**
         * The "submissions" collection of methods.
         */
        public class Submissions {

          /**
           * Create a request for the method "submissions.delete".
           *
           * This request holds the parameters needed by the the supersketchysketch server.  After setting any
           * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
           *
           * @param userId
           * @param assignmentId
           * @param questionId
           * @param id
           * @return the request
           */
          public Delete delete(java.lang.Long userId, java.lang.Long assignmentId, java.lang.Long questionId, java.lang.Long id) throws java.io.IOException {
            Delete result = new Delete(userId, assignmentId, questionId, id);
            initialize(result);
            return result;
          }

          public class Delete extends SupersketchysketchRequest<com.google.api.services.supersketchysketch.model.SRLSubmission> {

            private static final String REST_PATH = "srl_user/{userId}/srl_assignment/{assignmentId}/srl_question/{questionId}/srl_submission/{id}";

            /**
             * Create a request for the method "submissions.delete".
             *
             * This request holds the parameters needed by the the supersketchysketch server.  After setting
             * any optional parameters, call the {@link Delete#execute()} method to invoke the remote
             * operation. <p> {@link
             * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param userId
             * @param assignmentId
             * @param questionId
             * @param id
             * @since 1.13
             */
            protected Delete(java.lang.Long userId, java.lang.Long assignmentId, java.lang.Long questionId, java.lang.Long id) {
              super(Supersketchysketch.this, "DELETE", REST_PATH, null, com.google.api.services.supersketchysketch.model.SRLSubmission.class);
              this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
              this.assignmentId = com.google.api.client.util.Preconditions.checkNotNull(assignmentId, "Required parameter assignmentId must be specified.");
              this.questionId = com.google.api.client.util.Preconditions.checkNotNull(questionId, "Required parameter questionId must be specified.");
              this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
            }

            @Override
            public Delete setAlt(java.lang.String alt) {
              return (Delete) super.setAlt(alt);
            }

            @Override
            public Delete setFields(java.lang.String fields) {
              return (Delete) super.setFields(fields);
            }

            @Override
            public Delete setKey(java.lang.String key) {
              return (Delete) super.setKey(key);
            }

            @Override
            public Delete setOauthToken(java.lang.String oauthToken) {
              return (Delete) super.setOauthToken(oauthToken);
            }

            @Override
            public Delete setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Delete) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Delete setQuotaUser(java.lang.String quotaUser) {
              return (Delete) super.setQuotaUser(quotaUser);
            }

            @Override
            public Delete setUserIp(java.lang.String userIp) {
              return (Delete) super.setUserIp(userIp);
            }

            @com.google.api.client.util.Key
            private java.lang.Long userId;

            /**

             */
            public java.lang.Long getUserId() {
              return userId;
            }

            public Delete setUserId(java.lang.Long userId) {
              this.userId = userId;
              return this;
            }

            @com.google.api.client.util.Key
            private java.lang.Long assignmentId;

            /**

             */
            public java.lang.Long getAssignmentId() {
              return assignmentId;
            }

            public Delete setAssignmentId(java.lang.Long assignmentId) {
              this.assignmentId = assignmentId;
              return this;
            }

            @com.google.api.client.util.Key
            private java.lang.Long questionId;

            /**

             */
            public java.lang.Long getQuestionId() {
              return questionId;
            }

            public Delete setQuestionId(java.lang.Long questionId) {
              this.questionId = questionId;
              return this;
            }

            @com.google.api.client.util.Key
            private java.lang.Long id;

            /**

             */
            public java.lang.Long getId() {
              return id;
            }

            public Delete setId(java.lang.Long id) {
              this.id = id;
              return this;
            }

            @Override
            public Delete set(String parameterName, Object value) {
              return (Delete) super.set(parameterName, value);
            }
          }
          /**
           * Create a request for the method "submissions.get".
           *
           * This request holds the parameters needed by the the supersketchysketch server.  After setting any
           * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
           *
           * @param userId
           * @param assignmentId
           * @param questionId
           * @param id
           * @return the request
           */
          public Get get(java.lang.Long userId, java.lang.Long assignmentId, java.lang.Long questionId, java.lang.Long id) throws java.io.IOException {
            Get result = new Get(userId, assignmentId, questionId, id);
            initialize(result);
            return result;
          }

          public class Get extends SupersketchysketchRequest<com.google.api.services.supersketchysketch.model.SRLSubmission> {

            private static final String REST_PATH = "srl_user/{userId}/srl_assignment/{assignmentId}/srl_question/{questionId}/srl_submission/{id}";

            /**
             * Create a request for the method "submissions.get".
             *
             * This request holds the parameters needed by the the supersketchysketch server.  After setting
             * any optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
             * <p> {@link
             * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
             * called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param userId
             * @param assignmentId
             * @param questionId
             * @param id
             * @since 1.13
             */
            protected Get(java.lang.Long userId, java.lang.Long assignmentId, java.lang.Long questionId, java.lang.Long id) {
              super(Supersketchysketch.this, "GET", REST_PATH, null, com.google.api.services.supersketchysketch.model.SRLSubmission.class);
              this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
              this.assignmentId = com.google.api.client.util.Preconditions.checkNotNull(assignmentId, "Required parameter assignmentId must be specified.");
              this.questionId = com.google.api.client.util.Preconditions.checkNotNull(questionId, "Required parameter questionId must be specified.");
              this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
            }

            @Override
            public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
              return super.executeUsingHead();
            }

            @Override
            public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
              return super.buildHttpRequestUsingHead();
            }

            @Override
            public Get setAlt(java.lang.String alt) {
              return (Get) super.setAlt(alt);
            }

            @Override
            public Get setFields(java.lang.String fields) {
              return (Get) super.setFields(fields);
            }

            @Override
            public Get setKey(java.lang.String key) {
              return (Get) super.setKey(key);
            }

            @Override
            public Get setOauthToken(java.lang.String oauthToken) {
              return (Get) super.setOauthToken(oauthToken);
            }

            @Override
            public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Get) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Get setQuotaUser(java.lang.String quotaUser) {
              return (Get) super.setQuotaUser(quotaUser);
            }

            @Override
            public Get setUserIp(java.lang.String userIp) {
              return (Get) super.setUserIp(userIp);
            }

            @com.google.api.client.util.Key
            private java.lang.Long userId;

            /**

             */
            public java.lang.Long getUserId() {
              return userId;
            }

            public Get setUserId(java.lang.Long userId) {
              this.userId = userId;
              return this;
            }

            @com.google.api.client.util.Key
            private java.lang.Long assignmentId;

            /**

             */
            public java.lang.Long getAssignmentId() {
              return assignmentId;
            }

            public Get setAssignmentId(java.lang.Long assignmentId) {
              this.assignmentId = assignmentId;
              return this;
            }

            @com.google.api.client.util.Key
            private java.lang.Long questionId;

            /**

             */
            public java.lang.Long getQuestionId() {
              return questionId;
            }

            public Get setQuestionId(java.lang.Long questionId) {
              this.questionId = questionId;
              return this;
            }

            @com.google.api.client.util.Key
            private java.lang.Long id;

            /**

             */
            public java.lang.Long getId() {
              return id;
            }

            public Get setId(java.lang.Long id) {
              this.id = id;
              return this;
            }

            @Override
            public Get set(String parameterName, Object value) {
              return (Get) super.set(parameterName, value);
            }
          }
          /**
           * Create a request for the method "submissions.insert".
           *
           * This request holds the parameters needed by the the supersketchysketch server.  After setting any
           * optional parameters, call the {@link Insert#execute()} method to invoke the remote operation.
           *
           * @param assignmentId
           * @param questionId
           * @param userId
           * @param content the {@link com.google.api.services.supersketchysketch.model.SRLSubmission}
           * @return the request
           */
          public Insert insert(java.lang.Long assignmentId, java.lang.Long questionId, java.lang.Long userId, com.google.api.services.supersketchysketch.model.SRLSubmission content) throws java.io.IOException {
            Insert result = new Insert(assignmentId, questionId, userId, content);
            initialize(result);
            return result;
          }

          public class Insert extends SupersketchysketchRequest<com.google.api.services.supersketchysketch.model.SRLSubmission> {

            private static final String REST_PATH = "srl_user/{userid}/srl_assignment/{assignmentId}/srl_question/{questionId}/srl_submission";

            /**
             * Create a request for the method "submissions.insert".
             *
             * This request holds the parameters needed by the the supersketchysketch server.  After setting
             * any optional parameters, call the {@link Insert#execute()} method to invoke the remote
             * operation. <p> {@link
             * Insert#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param assignmentId
             * @param questionId
             * @param userId
             * @param content the {@link com.google.api.services.supersketchysketch.model.SRLSubmission}
             * @since 1.13
             */
            protected Insert(java.lang.Long assignmentId, java.lang.Long questionId, java.lang.Long userId, com.google.api.services.supersketchysketch.model.SRLSubmission content) {
              super(Supersketchysketch.this, "POST", REST_PATH, content, com.google.api.services.supersketchysketch.model.SRLSubmission.class);
              this.assignmentId = com.google.api.client.util.Preconditions.checkNotNull(assignmentId, "Required parameter assignmentId must be specified.");
              this.questionId = com.google.api.client.util.Preconditions.checkNotNull(questionId, "Required parameter questionId must be specified.");
              this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
            }

            @Override
            public Insert setAlt(java.lang.String alt) {
              return (Insert) super.setAlt(alt);
            }

            @Override
            public Insert setFields(java.lang.String fields) {
              return (Insert) super.setFields(fields);
            }

            @Override
            public Insert setKey(java.lang.String key) {
              return (Insert) super.setKey(key);
            }

            @Override
            public Insert setOauthToken(java.lang.String oauthToken) {
              return (Insert) super.setOauthToken(oauthToken);
            }

            @Override
            public Insert setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Insert) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Insert setQuotaUser(java.lang.String quotaUser) {
              return (Insert) super.setQuotaUser(quotaUser);
            }

            @Override
            public Insert setUserIp(java.lang.String userIp) {
              return (Insert) super.setUserIp(userIp);
            }

            @com.google.api.client.util.Key
            private java.lang.Long assignmentId;

            /**

             */
            public java.lang.Long getAssignmentId() {
              return assignmentId;
            }

            public Insert setAssignmentId(java.lang.Long assignmentId) {
              this.assignmentId = assignmentId;
              return this;
            }

            @com.google.api.client.util.Key
            private java.lang.Long questionId;

            /**

             */
            public java.lang.Long getQuestionId() {
              return questionId;
            }

            public Insert setQuestionId(java.lang.Long questionId) {
              this.questionId = questionId;
              return this;
            }

            @com.google.api.client.util.Key
            private java.lang.Long userId;

            /**

             */
            public java.lang.Long getUserId() {
              return userId;
            }

            public Insert setUserId(java.lang.Long userId) {
              this.userId = userId;
              return this;
            }

            @Override
            public Insert set(String parameterName, Object value) {
              return (Insert) super.set(parameterName, value);
            }
          }
          /**
           * Create a request for the method "submissions.list".
           *
           * This request holds the parameters needed by the the supersketchysketch server.  After setting any
           * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
           *
           * @param userId
           * @param assignmentId
           * @param questionId
           * @return the request
           */
          public List list(java.lang.Long userId, java.lang.Long assignmentId, java.lang.Long questionId) throws java.io.IOException {
            List result = new List(userId, assignmentId, questionId);
            initialize(result);
            return result;
          }

          public class List extends SupersketchysketchRequest<com.google.api.services.supersketchysketch.model.CollectionResponseSRLSubmission> {

            private static final String REST_PATH = "srl_user/{userId}/srl_assignment/{assignmentId}/srl_question/{questionId}/srl_submission";

            /**
             * Create a request for the method "submissions.list".
             *
             * This request holds the parameters needed by the the supersketchysketch server.  After setting
             * any optional parameters, call the {@link List#execute()} method to invoke the remote operation.
             * <p> {@link
             * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
             * called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param userId
             * @param assignmentId
             * @param questionId
             * @since 1.13
             */
            protected List(java.lang.Long userId, java.lang.Long assignmentId, java.lang.Long questionId) {
              super(Supersketchysketch.this, "GET", REST_PATH, null, com.google.api.services.supersketchysketch.model.CollectionResponseSRLSubmission.class);
              this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
              this.assignmentId = com.google.api.client.util.Preconditions.checkNotNull(assignmentId, "Required parameter assignmentId must be specified.");
              this.questionId = com.google.api.client.util.Preconditions.checkNotNull(questionId, "Required parameter questionId must be specified.");
            }

            @Override
            public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
              return super.executeUsingHead();
            }

            @Override
            public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
              return super.buildHttpRequestUsingHead();
            }

            @Override
            public List setAlt(java.lang.String alt) {
              return (List) super.setAlt(alt);
            }

            @Override
            public List setFields(java.lang.String fields) {
              return (List) super.setFields(fields);
            }

            @Override
            public List setKey(java.lang.String key) {
              return (List) super.setKey(key);
            }

            @Override
            public List setOauthToken(java.lang.String oauthToken) {
              return (List) super.setOauthToken(oauthToken);
            }

            @Override
            public List setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (List) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public List setQuotaUser(java.lang.String quotaUser) {
              return (List) super.setQuotaUser(quotaUser);
            }

            @Override
            public List setUserIp(java.lang.String userIp) {
              return (List) super.setUserIp(userIp);
            }

            @com.google.api.client.util.Key
            private java.lang.Long userId;

            /**

             */
            public java.lang.Long getUserId() {
              return userId;
            }

            public List setUserId(java.lang.Long userId) {
              this.userId = userId;
              return this;
            }

            @com.google.api.client.util.Key
            private java.lang.Long assignmentId;

            /**

             */
            public java.lang.Long getAssignmentId() {
              return assignmentId;
            }

            public List setAssignmentId(java.lang.Long assignmentId) {
              this.assignmentId = assignmentId;
              return this;
            }

            @com.google.api.client.util.Key
            private java.lang.Long questionId;

            /**

             */
            public java.lang.Long getQuestionId() {
              return questionId;
            }

            public List setQuestionId(java.lang.Long questionId) {
              this.questionId = questionId;
              return this;
            }

            @com.google.api.client.util.Key
            private java.lang.String cursor;

            /**

             */
            public java.lang.String getCursor() {
              return cursor;
            }

            public List setCursor(java.lang.String cursor) {
              this.cursor = cursor;
              return this;
            }

            @com.google.api.client.util.Key
            private java.lang.Integer limit;

            /**

             */
            public java.lang.Integer getLimit() {
              return limit;
            }

            public List setLimit(java.lang.Integer limit) {
              this.limit = limit;
              return this;
            }

            @Override
            public List set(String parameterName, Object value) {
              return (List) super.set(parameterName, value);
            }
          }
          /**
           * Create a request for the method "submissions.patch".
           *
           * This request holds the parameters needed by the the supersketchysketch server.  After setting any
           * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
           *
           * @param userId
           * @param assignmentId
           * @param questionId
           * @param id
           * @param content the {@link com.google.api.services.supersketchysketch.model.SRLSubmission}
           * @return the request
           */
          public Patch patch(java.lang.Long userId, java.lang.Long assignmentId, java.lang.Long questionId, java.lang.Long id, com.google.api.services.supersketchysketch.model.SRLSubmission content) throws java.io.IOException {
            Patch result = new Patch(userId, assignmentId, questionId, id, content);
            initialize(result);
            return result;
          }

          public class Patch extends SupersketchysketchRequest<com.google.api.services.supersketchysketch.model.SRLSubmission> {

            private static final String REST_PATH = "srl_user/{userId}/srl_assignment/{assignmentId}/srl_question/{questionId}/srl_submission";

            /**
             * Create a request for the method "submissions.patch".
             *
             * This request holds the parameters needed by the the supersketchysketch server.  After setting
             * any optional parameters, call the {@link Patch#execute()} method to invoke the remote
             * operation. <p> {@link
             * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param userId
             * @param assignmentId
             * @param questionId
             * @param id
             * @param content the {@link com.google.api.services.supersketchysketch.model.SRLSubmission}
             * @since 1.13
             */
            protected Patch(java.lang.Long userId, java.lang.Long assignmentId, java.lang.Long questionId, java.lang.Long id, com.google.api.services.supersketchysketch.model.SRLSubmission content) {
              super(Supersketchysketch.this, "PATCH", REST_PATH, content, com.google.api.services.supersketchysketch.model.SRLSubmission.class);
              this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
              this.assignmentId = com.google.api.client.util.Preconditions.checkNotNull(assignmentId, "Required parameter assignmentId must be specified.");
              this.questionId = com.google.api.client.util.Preconditions.checkNotNull(questionId, "Required parameter questionId must be specified.");
              this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
            }

            @Override
            public Patch setAlt(java.lang.String alt) {
              return (Patch) super.setAlt(alt);
            }

            @Override
            public Patch setFields(java.lang.String fields) {
              return (Patch) super.setFields(fields);
            }

            @Override
            public Patch setKey(java.lang.String key) {
              return (Patch) super.setKey(key);
            }

            @Override
            public Patch setOauthToken(java.lang.String oauthToken) {
              return (Patch) super.setOauthToken(oauthToken);
            }

            @Override
            public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Patch) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Patch setQuotaUser(java.lang.String quotaUser) {
              return (Patch) super.setQuotaUser(quotaUser);
            }

            @Override
            public Patch setUserIp(java.lang.String userIp) {
              return (Patch) super.setUserIp(userIp);
            }

            @com.google.api.client.util.Key
            private java.lang.Long userId;

            /**

             */
            public java.lang.Long getUserId() {
              return userId;
            }

            public Patch setUserId(java.lang.Long userId) {
              this.userId = userId;
              return this;
            }

            @com.google.api.client.util.Key
            private java.lang.Long assignmentId;

            /**

             */
            public java.lang.Long getAssignmentId() {
              return assignmentId;
            }

            public Patch setAssignmentId(java.lang.Long assignmentId) {
              this.assignmentId = assignmentId;
              return this;
            }

            @com.google.api.client.util.Key
            private java.lang.Long questionId;

            /**

             */
            public java.lang.Long getQuestionId() {
              return questionId;
            }

            public Patch setQuestionId(java.lang.Long questionId) {
              this.questionId = questionId;
              return this;
            }

            @com.google.api.client.util.Key
            private java.lang.Long id;

            /**

             */
            public java.lang.Long getId() {
              return id;
            }

            public Patch setId(java.lang.Long id) {
              this.id = id;
              return this;
            }

            @Override
            public Patch set(String parameterName, Object value) {
              return (Patch) super.set(parameterName, value);
            }
          }
          /**
           * Create a request for the method "submissions.update".
           *
           * This request holds the parameters needed by the the supersketchysketch server.  After setting any
           * optional parameters, call the {@link Update#execute()} method to invoke the remote operation.
           *
           * @param userId
           * @param assignmentId
           * @param questionId
           * @param content the {@link com.google.api.services.supersketchysketch.model.SRLSubmission}
           * @return the request
           */
          public Update update(java.lang.Long userId, java.lang.Long assignmentId, java.lang.Long questionId, com.google.api.services.supersketchysketch.model.SRLSubmission content) throws java.io.IOException {
            Update result = new Update(userId, assignmentId, questionId, content);
            initialize(result);
            return result;
          }

          public class Update extends SupersketchysketchRequest<com.google.api.services.supersketchysketch.model.SRLSubmission> {

            private static final String REST_PATH = "srl_user/{userId}/srl_assignment/{assignmentId}/srl_question/{questionId}/srl_submission";

            /**
             * Create a request for the method "submissions.update".
             *
             * This request holds the parameters needed by the the supersketchysketch server.  After setting
             * any optional parameters, call the {@link Update#execute()} method to invoke the remote
             * operation. <p> {@link
             * Update#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
             * be called to initialize this instance immediately after invoking the constructor. </p>
             *
             * @param userId
             * @param assignmentId
             * @param questionId
             * @param content the {@link com.google.api.services.supersketchysketch.model.SRLSubmission}
             * @since 1.13
             */
            protected Update(java.lang.Long userId, java.lang.Long assignmentId, java.lang.Long questionId, com.google.api.services.supersketchysketch.model.SRLSubmission content) {
              super(Supersketchysketch.this, "PUT", REST_PATH, content, com.google.api.services.supersketchysketch.model.SRLSubmission.class);
              this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
              this.assignmentId = com.google.api.client.util.Preconditions.checkNotNull(assignmentId, "Required parameter assignmentId must be specified.");
              this.questionId = com.google.api.client.util.Preconditions.checkNotNull(questionId, "Required parameter questionId must be specified.");
            }

            @Override
            public Update setAlt(java.lang.String alt) {
              return (Update) super.setAlt(alt);
            }

            @Override
            public Update setFields(java.lang.String fields) {
              return (Update) super.setFields(fields);
            }

            @Override
            public Update setKey(java.lang.String key) {
              return (Update) super.setKey(key);
            }

            @Override
            public Update setOauthToken(java.lang.String oauthToken) {
              return (Update) super.setOauthToken(oauthToken);
            }

            @Override
            public Update setPrettyPrint(java.lang.Boolean prettyPrint) {
              return (Update) super.setPrettyPrint(prettyPrint);
            }

            @Override
            public Update setQuotaUser(java.lang.String quotaUser) {
              return (Update) super.setQuotaUser(quotaUser);
            }

            @Override
            public Update setUserIp(java.lang.String userIp) {
              return (Update) super.setUserIp(userIp);
            }

            @com.google.api.client.util.Key
            private java.lang.Long userId;

            /**

             */
            public java.lang.Long getUserId() {
              return userId;
            }

            public Update setUserId(java.lang.Long userId) {
              this.userId = userId;
              return this;
            }

            @com.google.api.client.util.Key
            private java.lang.Long assignmentId;

            /**

             */
            public java.lang.Long getAssignmentId() {
              return assignmentId;
            }

            public Update setAssignmentId(java.lang.Long assignmentId) {
              this.assignmentId = assignmentId;
              return this;
            }

            @com.google.api.client.util.Key
            private java.lang.Long questionId;

            /**

             */
            public java.lang.Long getQuestionId() {
              return questionId;
            }

            public Update setQuestionId(java.lang.Long questionId) {
              this.questionId = questionId;
              return this;
            }

            @Override
            public Update set(String parameterName, Object value) {
              return (Update) super.set(parameterName, value);
            }
          }

        }
      }
    }
    /**
     * An accessor for creating requests from the Courses collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code Supersketchysketch supersketchysketch = new Supersketchysketch(...);}
     *   {@code Supersketchysketch.Courses.List request = supersketchysketch.courses().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Courses courses() {
      return new Courses();
    }

    /**
     * The "courses" collection of methods.
     */
    public class Courses {

      /**
       * Create a request for the method "courses.insert".
       *
       * This request holds the parameters needed by the the supersketchysketch server.  After setting any
       * optional parameters, call the {@link Insert#execute()} method to invoke the remote operation.
       *
       * @param userId
       * @param content the {@link com.google.api.services.supersketchysketch.model.SRLCourse}
       * @return the request
       */
      public Insert insert(java.lang.Long userId, com.google.api.services.supersketchysketch.model.SRLCourse content) throws java.io.IOException {
        Insert result = new Insert(userId, content);
        initialize(result);
        return result;
      }

      public class Insert extends SupersketchysketchRequest<com.google.api.services.supersketchysketch.model.SRLCourse> {

        private static final String REST_PATH = "srl_user/{userId}/srl_course";

        /**
         * Create a request for the method "courses.insert".
         *
         * This request holds the parameters needed by the the supersketchysketch server.  After setting
         * any optional parameters, call the {@link Insert#execute()} method to invoke the remote
         * operation. <p> {@link
         * Insert#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param userId
         * @param content the {@link com.google.api.services.supersketchysketch.model.SRLCourse}
         * @since 1.13
         */
        protected Insert(java.lang.Long userId, com.google.api.services.supersketchysketch.model.SRLCourse content) {
          super(Supersketchysketch.this, "POST", REST_PATH, content, com.google.api.services.supersketchysketch.model.SRLCourse.class);
          this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
        }

        @Override
        public Insert setAlt(java.lang.String alt) {
          return (Insert) super.setAlt(alt);
        }

        @Override
        public Insert setFields(java.lang.String fields) {
          return (Insert) super.setFields(fields);
        }

        @Override
        public Insert setKey(java.lang.String key) {
          return (Insert) super.setKey(key);
        }

        @Override
        public Insert setOauthToken(java.lang.String oauthToken) {
          return (Insert) super.setOauthToken(oauthToken);
        }

        @Override
        public Insert setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Insert) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Insert setQuotaUser(java.lang.String quotaUser) {
          return (Insert) super.setQuotaUser(quotaUser);
        }

        @Override
        public Insert setUserIp(java.lang.String userIp) {
          return (Insert) super.setUserIp(userIp);
        }

        @com.google.api.client.util.Key
        private java.lang.Long userId;

        /**

         */
        public java.lang.Long getUserId() {
          return userId;
        }

        public Insert setUserId(java.lang.Long userId) {
          this.userId = userId;
          return this;
        }

        @Override
        public Insert set(String parameterName, Object value) {
          return (Insert) super.set(parameterName, value);
        }
      }
      /**
       * Create a request for the method "courses.list".
       *
       * This request holds the parameters needed by the the supersketchysketch server.  After setting any
       * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
       *
       * @param userId
       * @return the request
       */
      public List list(java.lang.Long userId) throws java.io.IOException {
        List result = new List(userId);
        initialize(result);
        return result;
      }

      public class List extends SupersketchysketchRequest<com.google.api.services.supersketchysketch.model.SRLCourseCollection> {

        private static final String REST_PATH = "srl_user/{userId}/srl_course";

        /**
         * Create a request for the method "courses.list".
         *
         * This request holds the parameters needed by the the supersketchysketch server.  After setting
         * any optional parameters, call the {@link List#execute()} method to invoke the remote operation.
         * <p> {@link
         * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
         * called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param userId
         * @since 1.13
         */
        protected List(java.lang.Long userId) {
          super(Supersketchysketch.this, "GET", REST_PATH, null, com.google.api.services.supersketchysketch.model.SRLCourseCollection.class);
          this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public List setAlt(java.lang.String alt) {
          return (List) super.setAlt(alt);
        }

        @Override
        public List setFields(java.lang.String fields) {
          return (List) super.setFields(fields);
        }

        @Override
        public List setKey(java.lang.String key) {
          return (List) super.setKey(key);
        }

        @Override
        public List setOauthToken(java.lang.String oauthToken) {
          return (List) super.setOauthToken(oauthToken);
        }

        @Override
        public List setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (List) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public List setQuotaUser(java.lang.String quotaUser) {
          return (List) super.setQuotaUser(quotaUser);
        }

        @Override
        public List setUserIp(java.lang.String userIp) {
          return (List) super.setUserIp(userIp);
        }

        @com.google.api.client.util.Key
        private java.lang.Long userId;

        /**

         */
        public java.lang.Long getUserId() {
          return userId;
        }

        public List setUserId(java.lang.Long userId) {
          this.userId = userId;
          return this;
        }

        @Override
        public List set(String parameterName, Object value) {
          return (List) super.set(parameterName, value);
        }
      }

    }
    /**
     * An accessor for creating requests from the Questions collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code Supersketchysketch supersketchysketch = new Supersketchysketch(...);}
     *   {@code Supersketchysketch.Questions.List request = supersketchysketch.questions().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Questions questions() {
      return new Questions();
    }

    /**
     * The "questions" collection of methods.
     */
    public class Questions {

      /**
       * An accessor for creating requests from the Sumbissions collection.
       *
       * <p>The typical use is:</p>
       * <pre>
       *   {@code Supersketchysketch supersketchysketch = new Supersketchysketch(...);}
       *   {@code Supersketchysketch.Sumbissions.List request = supersketchysketch.sumbissions().list(parameters ...)}
       * </pre>
       *
       * @return the resource collection
       */
      public Sumbissions sumbissions() {
        return new Sumbissions();
      }

      /**
       * The "sumbissions" collection of methods.
       */
      public class Sumbissions {

        /**
         * Create a request for the method "sumbissions.insert".
         *
         * This request holds the parameters needed by the the supersketchysketch server.  After setting any
         * optional parameters, call the {@link Insert#execute()} method to invoke the remote operation.
         *
         * @param userId
         * @param questionId
         * @param content the {@link com.google.api.services.supersketchysketch.model.SRLSubmission}
         * @return the request
         */
        public Insert insert(java.lang.Long userId, java.lang.Long questionId, com.google.api.services.supersketchysketch.model.SRLSubmission content) throws java.io.IOException {
          Insert result = new Insert(userId, questionId, content);
          initialize(result);
          return result;
        }

        public class Insert extends SupersketchysketchRequest<com.google.api.services.supersketchysketch.model.SRLSubmission> {

          private static final String REST_PATH = "srl_user/{userId}/srl_question/{quesionId}/srl_submission";

          /**
           * Create a request for the method "sumbissions.insert".
           *
           * This request holds the parameters needed by the the supersketchysketch server.  After setting
           * any optional parameters, call the {@link Insert#execute()} method to invoke the remote
           * operation. <p> {@link
           * Insert#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param userId
           * @param questionId
           * @param content the {@link com.google.api.services.supersketchysketch.model.SRLSubmission}
           * @since 1.13
           */
          protected Insert(java.lang.Long userId, java.lang.Long questionId, com.google.api.services.supersketchysketch.model.SRLSubmission content) {
            super(Supersketchysketch.this, "POST", REST_PATH, content, com.google.api.services.supersketchysketch.model.SRLSubmission.class);
            this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
            this.questionId = com.google.api.client.util.Preconditions.checkNotNull(questionId, "Required parameter questionId must be specified.");
          }

          @Override
          public Insert setAlt(java.lang.String alt) {
            return (Insert) super.setAlt(alt);
          }

          @Override
          public Insert setFields(java.lang.String fields) {
            return (Insert) super.setFields(fields);
          }

          @Override
          public Insert setKey(java.lang.String key) {
            return (Insert) super.setKey(key);
          }

          @Override
          public Insert setOauthToken(java.lang.String oauthToken) {
            return (Insert) super.setOauthToken(oauthToken);
          }

          @Override
          public Insert setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Insert) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Insert setQuotaUser(java.lang.String quotaUser) {
            return (Insert) super.setQuotaUser(quotaUser);
          }

          @Override
          public Insert setUserIp(java.lang.String userIp) {
            return (Insert) super.setUserIp(userIp);
          }

          @com.google.api.client.util.Key
          private java.lang.Long userId;

          /**

           */
          public java.lang.Long getUserId() {
            return userId;
          }

          public Insert setUserId(java.lang.Long userId) {
            this.userId = userId;
            return this;
          }

          @com.google.api.client.util.Key
          private java.lang.Long questionId;

          /**

           */
          public java.lang.Long getQuestionId() {
            return questionId;
          }

          public Insert setQuestionId(java.lang.Long questionId) {
            this.questionId = questionId;
            return this;
          }

          @Override
          public Insert set(String parameterName, Object value) {
            return (Insert) super.set(parameterName, value);
          }
        }

      }
    }
    /**
     * An accessor for creating requests from the Submissions collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code Supersketchysketch supersketchysketch = new Supersketchysketch(...);}
     *   {@code Supersketchysketch.Submissions.List request = supersketchysketch.submissions().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Submissions submissions() {
      return new Submissions();
    }

    /**
     * The "submissions" collection of methods.
     */
    public class Submissions {

      /**
       * An accessor for creating requests from the Feedback collection.
       *
       * <p>The typical use is:</p>
       * <pre>
       *   {@code Supersketchysketch supersketchysketch = new Supersketchysketch(...);}
       *   {@code Supersketchysketch.Feedback.List request = supersketchysketch.feedback().list(parameters ...)}
       * </pre>
       *
       * @return the resource collection
       */
      public Feedback feedback() {
        return new Feedback();
      }

      /**
       * The "feedback" collection of methods.
       */
      public class Feedback {

        /**
         * Create a request for the method "feedback.get".
         *
         * This request holds the parameters needed by the the supersketchysketch server.  After setting any
         * optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
         *
         * @param userId
         * @param id
         * @return the request
         */
        public Get get(java.lang.Long userId, java.lang.Long id) throws java.io.IOException {
          Get result = new Get(userId, id);
          initialize(result);
          return result;
        }

        public class Get extends SupersketchysketchRequest<com.google.api.services.supersketchysketch.model.SRLFeedback> {

          private static final String REST_PATH = "srl_user/{userId}/srl_submission/{submissionId}/srl_feedback/{id}";

          /**
           * Create a request for the method "feedback.get".
           *
           * This request holds the parameters needed by the the supersketchysketch server.  After setting
           * any optional parameters, call the {@link Get#execute()} method to invoke the remote operation.
           * <p> {@link
           * Get#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
           * called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param userId
           * @param id
           * @since 1.13
           */
          protected Get(java.lang.Long userId, java.lang.Long id) {
            super(Supersketchysketch.this, "GET", REST_PATH, null, com.google.api.services.supersketchysketch.model.SRLFeedback.class);
            this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
            this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public Get setAlt(java.lang.String alt) {
            return (Get) super.setAlt(alt);
          }

          @Override
          public Get setFields(java.lang.String fields) {
            return (Get) super.setFields(fields);
          }

          @Override
          public Get setKey(java.lang.String key) {
            return (Get) super.setKey(key);
          }

          @Override
          public Get setOauthToken(java.lang.String oauthToken) {
            return (Get) super.setOauthToken(oauthToken);
          }

          @Override
          public Get setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Get) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Get setQuotaUser(java.lang.String quotaUser) {
            return (Get) super.setQuotaUser(quotaUser);
          }

          @Override
          public Get setUserIp(java.lang.String userIp) {
            return (Get) super.setUserIp(userIp);
          }

          @com.google.api.client.util.Key
          private java.lang.Long userId;

          /**

           */
          public java.lang.Long getUserId() {
            return userId;
          }

          public Get setUserId(java.lang.Long userId) {
            this.userId = userId;
            return this;
          }

          @com.google.api.client.util.Key
          private java.lang.Long id;

          /**

           */
          public java.lang.Long getId() {
            return id;
          }

          public Get setId(java.lang.Long id) {
            this.id = id;
            return this;
          }

          @Override
          public Get set(String parameterName, Object value) {
            return (Get) super.set(parameterName, value);
          }
        }
        /**
         * Create a request for the method "feedback.insert".
         *
         * This request holds the parameters needed by the the supersketchysketch server.  After setting any
         * optional parameters, call the {@link Insert#execute()} method to invoke the remote operation.
         *
         * @param userId
         * @param submissionId
         * @param content the {@link com.google.api.services.supersketchysketch.model.SRLFeedback}
         * @return the request
         */
        public Insert insert(java.lang.Long userId, java.lang.Long submissionId, com.google.api.services.supersketchysketch.model.SRLFeedback content) throws java.io.IOException {
          Insert result = new Insert(userId, submissionId, content);
          initialize(result);
          return result;
        }

        public class Insert extends SupersketchysketchRequest<com.google.api.services.supersketchysketch.model.SRLFeedback> {

          private static final String REST_PATH = "srl_user/{userId}/srl_submission/{submissionId}/srl_feedback";

          /**
           * Create a request for the method "feedback.insert".
           *
           * This request holds the parameters needed by the the supersketchysketch server.  After setting
           * any optional parameters, call the {@link Insert#execute()} method to invoke the remote
           * operation. <p> {@link
           * Insert#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param userId
           * @param submissionId
           * @param content the {@link com.google.api.services.supersketchysketch.model.SRLFeedback}
           * @since 1.13
           */
          protected Insert(java.lang.Long userId, java.lang.Long submissionId, com.google.api.services.supersketchysketch.model.SRLFeedback content) {
            super(Supersketchysketch.this, "POST", REST_PATH, content, com.google.api.services.supersketchysketch.model.SRLFeedback.class);
            this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
            this.submissionId = com.google.api.client.util.Preconditions.checkNotNull(submissionId, "Required parameter submissionId must be specified.");
          }

          @Override
          public Insert setAlt(java.lang.String alt) {
            return (Insert) super.setAlt(alt);
          }

          @Override
          public Insert setFields(java.lang.String fields) {
            return (Insert) super.setFields(fields);
          }

          @Override
          public Insert setKey(java.lang.String key) {
            return (Insert) super.setKey(key);
          }

          @Override
          public Insert setOauthToken(java.lang.String oauthToken) {
            return (Insert) super.setOauthToken(oauthToken);
          }

          @Override
          public Insert setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Insert) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Insert setQuotaUser(java.lang.String quotaUser) {
            return (Insert) super.setQuotaUser(quotaUser);
          }

          @Override
          public Insert setUserIp(java.lang.String userIp) {
            return (Insert) super.setUserIp(userIp);
          }

          @com.google.api.client.util.Key
          private java.lang.Long userId;

          /**

           */
          public java.lang.Long getUserId() {
            return userId;
          }

          public Insert setUserId(java.lang.Long userId) {
            this.userId = userId;
            return this;
          }

          @com.google.api.client.util.Key
          private java.lang.Long submissionId;

          /**

           */
          public java.lang.Long getSubmissionId() {
            return submissionId;
          }

          public Insert setSubmissionId(java.lang.Long submissionId) {
            this.submissionId = submissionId;
            return this;
          }

          @Override
          public Insert set(String parameterName, Object value) {
            return (Insert) super.set(parameterName, value);
          }
        }
        /**
         * Create a request for the method "feedback.list".
         *
         * This request holds the parameters needed by the the supersketchysketch server.  After setting any
         * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
         *
         * @param userId
         * @param submissionId
         * @return the request
         */
        public List list(java.lang.Long userId, java.lang.Long submissionId) throws java.io.IOException {
          List result = new List(userId, submissionId);
          initialize(result);
          return result;
        }

        public class List extends SupersketchysketchRequest<com.google.api.services.supersketchysketch.model.CollectionResponseSRLFeedback> {

          private static final String REST_PATH = "srl_user/{userId}/srl_submission/{submissionId}/srl_feedback";

          /**
           * Create a request for the method "feedback.list".
           *
           * This request holds the parameters needed by the the supersketchysketch server.  After setting
           * any optional parameters, call the {@link List#execute()} method to invoke the remote operation.
           * <p> {@link
           * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
           * called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param userId
           * @param submissionId
           * @since 1.13
           */
          protected List(java.lang.Long userId, java.lang.Long submissionId) {
            super(Supersketchysketch.this, "GET", REST_PATH, null, com.google.api.services.supersketchysketch.model.CollectionResponseSRLFeedback.class);
            this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
            this.submissionId = com.google.api.client.util.Preconditions.checkNotNull(submissionId, "Required parameter submissionId must be specified.");
          }

          @Override
          public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
            return super.executeUsingHead();
          }

          @Override
          public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
            return super.buildHttpRequestUsingHead();
          }

          @Override
          public List setAlt(java.lang.String alt) {
            return (List) super.setAlt(alt);
          }

          @Override
          public List setFields(java.lang.String fields) {
            return (List) super.setFields(fields);
          }

          @Override
          public List setKey(java.lang.String key) {
            return (List) super.setKey(key);
          }

          @Override
          public List setOauthToken(java.lang.String oauthToken) {
            return (List) super.setOauthToken(oauthToken);
          }

          @Override
          public List setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (List) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public List setQuotaUser(java.lang.String quotaUser) {
            return (List) super.setQuotaUser(quotaUser);
          }

          @Override
          public List setUserIp(java.lang.String userIp) {
            return (List) super.setUserIp(userIp);
          }

          @com.google.api.client.util.Key
          private java.lang.Long userId;

          /**

           */
          public java.lang.Long getUserId() {
            return userId;
          }

          public List setUserId(java.lang.Long userId) {
            this.userId = userId;
            return this;
          }

          @com.google.api.client.util.Key
          private java.lang.Long submissionId;

          /**

           */
          public java.lang.Long getSubmissionId() {
            return submissionId;
          }

          public List setSubmissionId(java.lang.Long submissionId) {
            this.submissionId = submissionId;
            return this;
          }

          @com.google.api.client.util.Key
          private java.lang.String cursor;

          /**

           */
          public java.lang.String getCursor() {
            return cursor;
          }

          public List setCursor(java.lang.String cursor) {
            this.cursor = cursor;
            return this;
          }

          @com.google.api.client.util.Key
          private java.lang.Integer limit;

          /**

           */
          public java.lang.Integer getLimit() {
            return limit;
          }

          public List setLimit(java.lang.Integer limit) {
            this.limit = limit;
            return this;
          }

          @Override
          public List set(String parameterName, Object value) {
            return (List) super.set(parameterName, value);
          }
        }
        /**
         * Create a request for the method "feedback.patch".
         *
         * This request holds the parameters needed by the the supersketchysketch server.  After setting any
         * optional parameters, call the {@link Patch#execute()} method to invoke the remote operation.
         *
         * @param userId
         * @param submissionId
         * @param id
         * @param content the {@link com.google.api.services.supersketchysketch.model.SRLFeedback}
         * @return the request
         */
        public Patch patch(java.lang.Long userId, java.lang.Long submissionId, java.lang.Long id, com.google.api.services.supersketchysketch.model.SRLFeedback content) throws java.io.IOException {
          Patch result = new Patch(userId, submissionId, id, content);
          initialize(result);
          return result;
        }

        public class Patch extends SupersketchysketchRequest<com.google.api.services.supersketchysketch.model.SRLFeedback> {

          private static final String REST_PATH = "srl_user/{userId}/srl_submission/{submissionId}/srl_feedback";

          /**
           * Create a request for the method "feedback.patch".
           *
           * This request holds the parameters needed by the the supersketchysketch server.  After setting
           * any optional parameters, call the {@link Patch#execute()} method to invoke the remote
           * operation. <p> {@link
           * Patch#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param userId
           * @param submissionId
           * @param id
           * @param content the {@link com.google.api.services.supersketchysketch.model.SRLFeedback}
           * @since 1.13
           */
          protected Patch(java.lang.Long userId, java.lang.Long submissionId, java.lang.Long id, com.google.api.services.supersketchysketch.model.SRLFeedback content) {
            super(Supersketchysketch.this, "PATCH", REST_PATH, content, com.google.api.services.supersketchysketch.model.SRLFeedback.class);
            this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
            this.submissionId = com.google.api.client.util.Preconditions.checkNotNull(submissionId, "Required parameter submissionId must be specified.");
            this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
          }

          @Override
          public Patch setAlt(java.lang.String alt) {
            return (Patch) super.setAlt(alt);
          }

          @Override
          public Patch setFields(java.lang.String fields) {
            return (Patch) super.setFields(fields);
          }

          @Override
          public Patch setKey(java.lang.String key) {
            return (Patch) super.setKey(key);
          }

          @Override
          public Patch setOauthToken(java.lang.String oauthToken) {
            return (Patch) super.setOauthToken(oauthToken);
          }

          @Override
          public Patch setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Patch) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Patch setQuotaUser(java.lang.String quotaUser) {
            return (Patch) super.setQuotaUser(quotaUser);
          }

          @Override
          public Patch setUserIp(java.lang.String userIp) {
            return (Patch) super.setUserIp(userIp);
          }

          @com.google.api.client.util.Key
          private java.lang.Long userId;

          /**

           */
          public java.lang.Long getUserId() {
            return userId;
          }

          public Patch setUserId(java.lang.Long userId) {
            this.userId = userId;
            return this;
          }

          @com.google.api.client.util.Key
          private java.lang.Long submissionId;

          /**

           */
          public java.lang.Long getSubmissionId() {
            return submissionId;
          }

          public Patch setSubmissionId(java.lang.Long submissionId) {
            this.submissionId = submissionId;
            return this;
          }

          @com.google.api.client.util.Key
          private java.lang.Long id;

          /**

           */
          public java.lang.Long getId() {
            return id;
          }

          public Patch setId(java.lang.Long id) {
            this.id = id;
            return this;
          }

          @Override
          public Patch set(String parameterName, Object value) {
            return (Patch) super.set(parameterName, value);
          }
        }
        /**
         * Create a request for the method "feedback.remove".
         *
         * This request holds the parameters needed by the the supersketchysketch server.  After setting any
         * optional parameters, call the {@link Remove#execute()} method to invoke the remote operation.
         *
         * @param userId
         * @param submissionId
         * @param id
         * @return the request
         */
        public Remove remove(java.lang.Long userId, java.lang.Long submissionId, java.lang.Long id) throws java.io.IOException {
          Remove result = new Remove(userId, submissionId, id);
          initialize(result);
          return result;
        }

        public class Remove extends SupersketchysketchRequest<com.google.api.services.supersketchysketch.model.SRLFeedback> {

          private static final String REST_PATH = "srl_user/{userId}/srl_submission/{submissionId}/srl_feedback";

          /**
           * Create a request for the method "feedback.remove".
           *
           * This request holds the parameters needed by the the supersketchysketch server.  After setting
           * any optional parameters, call the {@link Remove#execute()} method to invoke the remote
           * operation. <p> {@link
           * Remove#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param userId
           * @param submissionId
           * @param id
           * @since 1.13
           */
          protected Remove(java.lang.Long userId, java.lang.Long submissionId, java.lang.Long id) {
            super(Supersketchysketch.this, "DELETE", REST_PATH, null, com.google.api.services.supersketchysketch.model.SRLFeedback.class);
            this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
            this.submissionId = com.google.api.client.util.Preconditions.checkNotNull(submissionId, "Required parameter submissionId must be specified.");
            this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
          }

          @Override
          public Remove setAlt(java.lang.String alt) {
            return (Remove) super.setAlt(alt);
          }

          @Override
          public Remove setFields(java.lang.String fields) {
            return (Remove) super.setFields(fields);
          }

          @Override
          public Remove setKey(java.lang.String key) {
            return (Remove) super.setKey(key);
          }

          @Override
          public Remove setOauthToken(java.lang.String oauthToken) {
            return (Remove) super.setOauthToken(oauthToken);
          }

          @Override
          public Remove setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Remove) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Remove setQuotaUser(java.lang.String quotaUser) {
            return (Remove) super.setQuotaUser(quotaUser);
          }

          @Override
          public Remove setUserIp(java.lang.String userIp) {
            return (Remove) super.setUserIp(userIp);
          }

          @com.google.api.client.util.Key
          private java.lang.Long userId;

          /**

           */
          public java.lang.Long getUserId() {
            return userId;
          }

          public Remove setUserId(java.lang.Long userId) {
            this.userId = userId;
            return this;
          }

          @com.google.api.client.util.Key
          private java.lang.Long submissionId;

          /**

           */
          public java.lang.Long getSubmissionId() {
            return submissionId;
          }

          public Remove setSubmissionId(java.lang.Long submissionId) {
            this.submissionId = submissionId;
            return this;
          }

          @com.google.api.client.util.Key
          private java.lang.Long id;

          /**

           */
          public java.lang.Long getId() {
            return id;
          }

          public Remove setId(java.lang.Long id) {
            this.id = id;
            return this;
          }

          @Override
          public Remove set(String parameterName, Object value) {
            return (Remove) super.set(parameterName, value);
          }
        }
        /**
         * Create a request for the method "feedback.update".
         *
         * This request holds the parameters needed by the the supersketchysketch server.  After setting any
         * optional parameters, call the {@link Update#execute()} method to invoke the remote operation.
         *
         * @param userId
         * @param submissionId
         * @param content the {@link com.google.api.services.supersketchysketch.model.SRLFeedback}
         * @return the request
         */
        public Update update(java.lang.Long userId, java.lang.Long submissionId, com.google.api.services.supersketchysketch.model.SRLFeedback content) throws java.io.IOException {
          Update result = new Update(userId, submissionId, content);
          initialize(result);
          return result;
        }

        public class Update extends SupersketchysketchRequest<com.google.api.services.supersketchysketch.model.SRLFeedback> {

          private static final String REST_PATH = "srl_user/{userId}/srl_submission/{submissionId}/srl_feedback";

          /**
           * Create a request for the method "feedback.update".
           *
           * This request holds the parameters needed by the the supersketchysketch server.  After setting
           * any optional parameters, call the {@link Update#execute()} method to invoke the remote
           * operation. <p> {@link
           * Update#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
           * be called to initialize this instance immediately after invoking the constructor. </p>
           *
           * @param userId
           * @param submissionId
           * @param content the {@link com.google.api.services.supersketchysketch.model.SRLFeedback}
           * @since 1.13
           */
          protected Update(java.lang.Long userId, java.lang.Long submissionId, com.google.api.services.supersketchysketch.model.SRLFeedback content) {
            super(Supersketchysketch.this, "PUT", REST_PATH, content, com.google.api.services.supersketchysketch.model.SRLFeedback.class);
            this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
            this.submissionId = com.google.api.client.util.Preconditions.checkNotNull(submissionId, "Required parameter submissionId must be specified.");
          }

          @Override
          public Update setAlt(java.lang.String alt) {
            return (Update) super.setAlt(alt);
          }

          @Override
          public Update setFields(java.lang.String fields) {
            return (Update) super.setFields(fields);
          }

          @Override
          public Update setKey(java.lang.String key) {
            return (Update) super.setKey(key);
          }

          @Override
          public Update setOauthToken(java.lang.String oauthToken) {
            return (Update) super.setOauthToken(oauthToken);
          }

          @Override
          public Update setPrettyPrint(java.lang.Boolean prettyPrint) {
            return (Update) super.setPrettyPrint(prettyPrint);
          }

          @Override
          public Update setQuotaUser(java.lang.String quotaUser) {
            return (Update) super.setQuotaUser(quotaUser);
          }

          @Override
          public Update setUserIp(java.lang.String userIp) {
            return (Update) super.setUserIp(userIp);
          }

          @com.google.api.client.util.Key
          private java.lang.Long userId;

          /**

           */
          public java.lang.Long getUserId() {
            return userId;
          }

          public Update setUserId(java.lang.Long userId) {
            this.userId = userId;
            return this;
          }

          @com.google.api.client.util.Key
          private java.lang.Long submissionId;

          /**

           */
          public java.lang.Long getSubmissionId() {
            return submissionId;
          }

          public Update setSubmissionId(java.lang.Long submissionId) {
            this.submissionId = submissionId;
            return this;
          }

          @Override
          public Update set(String parameterName, Object value) {
            return (Update) super.set(parameterName, value);
          }
        }

      }
    }
  }

  /**
   * Builder for {@link Supersketchysketch}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
    }

    /** Builds a new instance of {@link Supersketchysketch}. */
    @Override
    public Supersketchysketch build() {
      return new Supersketchysketch(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link SupersketchysketchRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setSupersketchysketchRequestInitializer(
        SupersketchysketchRequestInitializer supersketchysketchRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(supersketchysketchRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
